# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet -- Block Comment
	{- $0 -}
snippet comment Block Comment
	{- $0 -}
snippet block_comment Block Comment
	{- $0 -}
snippet case Case statement
	case ${1:expression} of
		${2:case1} -> ${3:result}
		${4:case2} -> ${5:result}$0
snippet data inline Inline data
	data ${1:type} = ${2:data}$0 ${3:deriving (${4:Show, Eq})}
snippet data record Data record
	data ${1:Type} = $1
		{ ${2:field} :: ${3:Type}
		, ${4:field} :: ${5:Type}$0
		} ${6:deriving (${7:Show, Eq})}
snippet fns Simple function
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:x} = ${6:undefined}$0 
snippet simple function Simple function
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:x} = ${6:undefined}$0 
snippet fnc Clause function
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:pattern} = ${7:undefined}
	$1 ${6:pattern} = ${8:undefined}$0
snippet clause function Clause function
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:pattern} = ${7:undefined}
	$1 ${6:pattern} = ${8:undefined}$0
snippet fng Guarded function
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:x}
		| ${6:condition} = ${8:undefined}
		| ${7:condition} = ${9:undefined}$0
snippet guarded function Guarded function
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:x}
		| ${6:condition} = ${8:undefined}
		| ${7:condition} = ${9:undefined}$0
snippet fnw Function with where
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:x} = ${6:undefined}$0
		where
			${7:exprs}
snippet where function Function with where
	${1:f} :: ${2:a} ${3:-> ${4:b}}
	$1 ${5:x} = ${6:undefined}$0
		where
			${7:exprs}
snippet get Monadic get
	${1:x} <- ${2:undefined}$0
snippet if simple If block
	if ${1:condition}
		then ${2:undefined}
		else ${3:undefined}$0
snippet if inline If inline
	if ${1:condition} then ${2:undefined} else ${3:undefined}$0,
snippet import simple Simple import
	import ${1:module} ${2:(${3:f})}$0
snippet import qual Qualified import
	import qualified ${1:module} as ${2:name}
snippet inst typeclass instance
	instance ${1:Class} ${2:Data} where
		${3:f} = ${4:undefined}$0
snippet lambda lambda function
	\${1:x} -> ${2:undefined}$0
snippet \ lambda function
	\${1:x} -> ${2:undefined}$0
snippet let let statement
	let ${1:x} = ${2:undefined}$0
snippet main main module
	module Main where
	
	
	main :: IO ()
	main = do
		${1:undefined}$0
	return ()
snippet mod simple simple module
	module ${1:mod} where$0
snippet mods simple module
	module ${1:mod} where$0
snippet mod exports simple module with exports
	module ${1:mod} (
			${2:export}
		${3:, ${4:export}}
	) where$0
snippet modu simple module with exports
	module ${1:mod} (
			${2:export}
		${3:, ${4:export}}
	) where$0
snippet new Newtype definition
	newtype ${1:Type} ${2:a} = $1 { un$1 :: ${3:a} } ${4:deriving (${5:Show, Eq})}$0
snippet opt GHC options pragma
	{-# OPTIONS_GHC ${1:opt} #-}$0
snippet lang Language extension pragma
	{-# LANGUAGE ${1:extension} #-}$0

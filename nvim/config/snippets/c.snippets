# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet def Code snippet for #define " "
	#define $0
snippet #if Code snippet for #if
	#if ${1:0}
	$0
	#endif /* $1 */
snippet #ifdef Code snippet for #ifdef
	#ifdef ${1:DEBUG}
	$0
	#endif /* $1 */
snippet #ifndef Code snippet for #ifndef
	#ifndef ${1:DEBUG}
	$0
	#endif /* !$1 */
snippet #inc Code snippet for #include " "
	#include "$0"
snippet #inc< Code snippet for #include < >
	#include <$0>
snippet cal Allocates memory to a pointer variable using calloc(), then deallocates using free().
	${1:int} *${2:v} = calloc(${3:1}, sizeof($1));
	
	if (!$2) {
		fprintf(stderr, "Memory allocation failed!\\n");
		$4;
	}
	$0
	free($2);
snippet mal Allocates memory to a pointer variable using malloc(), then deallocates using free().
	${1:int} *${2:v} = malloc(${3:1} * sizeof($1));
	
	if (!$2) {
		fprintf(stderr, "Memory allocation failed!\\n");
		$4;
	}
	$0
	free($2);
snippet func Creates a function
	${2:void} ${1:func}(${4:void})
	{
		$3
	}
snippet doubfunc Creates a function that returns the double type
	double $1 ()
	{
		double $2 = $3;$4
		return $2;
	}
snippet flfunc Creates a function that returns the float type
	float $1 ()
	{
		float $2 = $3;$4
		return $2;
	}
snippet intfunc Creates a function that returns the int type
	int $1 ()
	{
		int $2 = $3;$4
		return $2;
	}
snippet clist Creates a linked list template
	typedef struct _node * Link;
	typedef struct _node node;
	struct _node {
		int value;
		Link next;
	};
snippet longfunc Creates a function that returns the long type
	long $1 ()
	{
		long $2 = $3;$4
		return $3;
	}
snippet strfunc Creates a function that returns the char array type
	char[] $1 ()
	{
		char[] $2 = {$3};$4
		return $2;
	}
snippet do Creates a do...while loop
	do {
		$1
	} while($2);
snippet main A standard main function for a C program
	int main (int argc, char *argv[])
	{
		$0
		return 0;
	}
snippet pcha Calls printf() to log value of variable of type char
	printf("$0 :>> %c\\n", $0);
snippet pflo Calls printf() to log value of variable of type float rounded to 2 decimal places
	printf("$0 :>> %.2f\\n", $0);
snippet pint Calls printf() to log value of variable of type signed integer
	printf("$0 :>> %d\\n", $0);
snippet ppoint Calls printf() to log value of variable of type pointer
	printf("$0 :>> %p\\n", (void *) $0);
snippet psiz Calls printf() to log value of variable of type size_t
	printf("$0 :>> %zu\\n", $0);
snippet sst A standard starter template for a C program
	#include <stdio.h>
	
	int main (int argc, char *argv[])
	{
		$0
		return 0;
	}
snippet libsst A standard starter template for a C program with stdlib included
	#include <stdio.h>
	#include <stdlib.h>
	
	int main (int argc, char *argv[])
	{
		$0
		return 0;
	}
snippet case Code snippet for case branch
	case $1:
		$0
		break;
snippet else Code snippet for else statement
	else {
		$0
	}
snippet else if Code snippet for else-if statement
	else if ($1) {
		$0
	}
snippet enum Code snippet for enum
	enum ${1:MyEnum} {
		$0
	};
snippet for Code snippet for 'for' loop
	for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {
		$0
	}
snippet forr Code snippet for reverse 'for' loop
	for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {
		$0
	}
snippet fprintf Generic fprintf() snippet
	fprintf(${1:stderr}, "$2\\n"$0);
snippet fscanf Generic fscanf() snippet
	fscanf($1, "$2"$0);
snippet if Code snippet for if statement
	if ($1) {
		$0
	}
snippet printf Generic printf() snippet
	printf("$1\\n"$0);
snippet scanf Generic scanf() snippet
	scanf("$1"$0);
snippet sprintf Generic sprintf() snippet
	sprintf($1, "$2\\n"$0);
snippet sscanf Generic sscanf() snippet
	sscanf($1, "$2"$0);
snippet struct Code snippet for struct
	struct ${1:MyStruct} {
		$0
	};
snippet switch Code snippet for switch statement
	switch (${1:switch_on}) {
		default:
			$0
			break;
	}
snippet structt Code snippet to define a type with struct
	typedef struct {
		$0
	} ${1:MyStruct};
snippet union Code snippet for union
	union ${1:MyUnion} {
		$0
	};
snippet while 
	while ($1) {
		$0
	}

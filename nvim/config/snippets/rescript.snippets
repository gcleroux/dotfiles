# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet @w
	@@warning("${1:-27}")
snippet gt
	@genType
snippet gta
	@genType.as("${1:CB}")
snippet gti
	@genType.import("${1:./MyMath}")
snippet dar
	let [${1:a}] = ${2:data}
snippet bfstr
	Belt.Int.fromString(${1:10})
snippet bfs
	Belt.Int.fromString(${1:10})
snippet btstr
	Belt.Int.toString(${1:10})
snippet bts
	Belt.Int.toString(${1:10})
snippet for
	for ${1:i} in ${2:startValueInclusive} to ${3:endValueInclusive} {
		${4:Js.log(${1:i})}
	}
snippet @bs
	@scope("${1:Math}") @val external ${2:random}: ${3:unit => float} = "${4:random}"
snippet external
	@scope("${1:Math}") @val external ${2:random}: ${3:unit => float} = "${4:random}"
snippet external
	@val external ${1:setTimeout}: ${2:(unit => unit, int) => float} = "${3:setTimeout}"
snippet @bs
	@val external ${1:setTimeout}: ${2:(unit => unit, int) => float} = "${3:setTimeout}"
snippet @bs
	@module external ${1:leftPad}: ${2:(string, int) => string} = "${3:leftPad}"
snippet external
	@module external ${1:leftPad}: ${2:(string, int) => string} = "${3:leftPad}"
snippet external
	@module("${1:path}") external ${2:dirname}: ${3:string => string} = "${4:dirname}"
snippet @bs
	@module("${1:path}") external ${2:dirname}: ${3:string => string} = "${4:dirname}"
snippet module
	module ${1:Name} = {
		${2:// Module contents}
	}
snippet dob
	let {${1:a}} = ${2:data}
snippet rs
	raise(${1:SomeError}(${2:// write your text}))
snippet raise
	raise(${1:SomeError}(${2:// write your text}))
snippet react.component
	@react.component
	let make = ($1) => {
		$2
	}
snippet @react
	@react.component
	let make = ($1) => {
		$2
	}
snippet for
	for ${1:i} in ${2:startValueInclusive} downto ${3:endValueInclusive} {
		${4:Js.log(${1:i})}
	}
snippet switch
	switch ${1:value} {
	| ${2:pattern1} => ${3:expression}
	${4:| ${5:pattern2} => ${6:expression}}
	}
snippet to
	${1:a} ? ${2:b} : ${3:c}
snippet tlr
	%%raw(\`
		${1://js code}
	\`)
snippet tle
	%%raw(\`
		${1://js code}
	\`)
snippet try
	try {
		${1:expression}
	} catch {
	| ${2:MyException} => ${3:expression}
	}
snippet @a
	@as("${1:aria-label}")
snippet @dw
	@deprecated("${1:This field deprecated}. Use ${2:something} instead")
snippet ce
	Js.error(${1:something})
snippet cer
	Js.error(${1:something})
snippet ci
	Js.info(${1:something})
snippet coi
	Js.info(${1:something})
snippet col
	Js.log(${1:something})
snippet cl
	Js.log(${1:something})
snippet cte
	Js.timeEnd(${1:something})
snippet cts
	Js.timeStart(${1:something})
snippet ct
	Js.trace(${1:something})
snippet ctr
	Js.trace(${1:something})
snippet cow
	Js.warn(${1:something})
snippet cw
	Js.warn(${1:something})
snippet elr
	%raw("${1://js expression}")
snippet exe
	%raw("${1://js expression}")
snippet ele
	%raw("${1://js expression}")
snippet function
	let ${1:doSomeStuff} = ($2) => {
		$0
	}
snippet ifi
	if ${1:a} {${2:b}} else {${3:c}}
snippet fn
	let ${1:name} = ($2) => $0
snippet dbg
	%%debugger
snippet letm
	let ${1:x} = ref(${2:"hello"})
snippet mvar
	let ${1:x} = ref(${2:"hello"})
snippet lm
	let ${1:x} = ref(${2:"hello"})
snippet pipe
	${1:firstFunction}
		->${2:secondFunction}
snippet funcpp
	${1:firstFunction}
		->${2:secondFunction}
snippet fnpp
	${1:firstFunction}
		->${2:secondFunction}
snippet tp
	type ${1:x} = ${2:int}
snippet t
	type ${1:x} = ${2:int}
snippet type
	type ${1:x} = ${2:int}
snippet typepv
	type ${1:x} = [ #${2:one} | #${3:two} ]
snippet tpv
	type ${1:x} = [ #${2:one} | #${3:two} ]
snippet typeg
	type ${1:x}<'${2:a}> = ${3:int}
snippet tpg
	type ${1:x}<'${2:a}> = ${3:int}
snippet l
	let ${1:x} = ${2:"hello"}
snippet var
	let ${1:x} = ${2:"hello"}
snippet let
	let ${1:x} = ${2:"hello"}

# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet *>> <summary
	*>> <summary>${1:XX is a method in the YY class.}
	*>> <para>$2</para>
	*>> $0
	*>> </summary>
snippet <exception
	<exception cref="${1:member}">${2:description}</exception>
	*>> $0
snippet <param>
	<param name="${1:Int}">$2</param>
	*>> $0
snippet <returns>
	<returns>${1:description}</returns>
	*>> $0
snippet <value>
	value>${1:property-description}</value>
	*>> $0
snippet ACCEPT
	ACCEPT ${1:variable}
	$0
snippet ACCEPT ACCEPT FROM DATE/DAY/WEEK/TIME
	ACCEPT ${1:variable} ${2|FROM DATE,FROM DAY,FROM DAY-OF-WEEK,TIME|}
	$0
snippet ADD Add a to b giving c
	ADD ${1:a} TO ${2:b} GIVING ${3:c}
snippet CALL CALL literal
	CALL "$1" USING
	    BY ${2|VALUE,REFERENCE,CONTENT|} ${3:IDENTIFER}
	    RETURNING ${4:RETURN-CODE}
	END-CALL
	$0
snippet CANCEL CANCEL literal
	CANCEL "$1"
	$0
snippet COPY COPY REPLACING
	COPY "${1:SUBPROG.CPY}"
	    REPLACING ==${2:()}== BY ==${3:lnk-}==.
snippet DATA DIVISION
	DATA DIVISION.
	$0
snippet DD
	DATA DIVISION.
	$0
snippet DELIMITED BY SIZE DELIMITED BY SIZE (string)
	DELIMITED BY SIZE
snippet DBS DELIMITED BY SIZE (string)
	DELIMITED BY SIZE
snippet DELIMITED BY SPACE DELIMITED BY SPACE (string)
	DELIMITED BY SPACE
snippet DS DELIMITED BY SPACE (string)
	DELIMITED BY SPACE
snippet DISPLAY DISPLAY literal
	DISPLAY "$0"
snippet DIVIDE DIVIDE a BY b GIVING [REMAINDER}
	DIVIDE ${1:a} BY ${2:b} GIVING ${3:c} ${4:REMAINDER ${5:d}}
snippet DGR DIVIDE a BY b GIVING [REMAINDER}
	DIVIDE ${1:a} BY ${2:b} GIVING ${3:c} ${4:REMAINDER ${5:d}}
snippet ENTRY ENTRY statement
	$1-EP SECTON.
	ENTRY "$1".
	    $0	
	    GOBACK.
	
snippet GB ENTRY statement
	$1-EP SECTON.
	ENTRY "$1".
	    $0	
	    GOBACK.
	
snippet ENVIRONMENT DIVISION
	ENVIRONMENT DIVISION.
	$0
snippet ED
	ENVIRONMENT DIVISION.
	$0
snippet EVALUATE EVALUATE
	EVALUATE $1
	    WHEN $2
	       $0
	    WHEN OTHER
	       CONTINUE
	END-EVALUATE
	
snippet EP EXIT PROGRAM
	EXIT PROGRAM RETURNING ${1:item}
snippet EXIT EXIT PROGRAM
	EXIT PROGRAM RETURNING ${1:item}
snippet FUNCTION ABS function absolute value of number
	FUNCTION ABS(${1:number})$0
snippet FUNCTION ACOS function trigonometric arc-cosine, or inverse cosine, of cosine
	FUNCTION ACOS(${1:cosine})$0
snippet FUNCTION ANNUITY function annuity
	FUNCTION ANNUITY(${1:interest-rate},${2:number-of-periods})$0
snippet FUNCTION ASIN function trigonometric arc-sine, or inverse sine, of sine
	FUNCTION ASIN(${1:sine})$0
snippet FUNCTION ATAN function trigonometric arc-tangent, or inverse tangent, of tangent
	FUNCTION ATAN(${1:tangent})$0
snippet FUNCTION BOOLEAN-OF-INTEGER function boolean item of usage bit representing the binary value of integer; with the given length
	FUNCTION BOOLEAN-OF-INTEGER(${1:integer},${2:length})$0
snippet FUNCTION BYTE-LENGTH function byte-length (in bytes) of item
	FUNCTION BYTE-LENGTH(${1:integer})$0
snippet FUNCTION CHAR function character in the ordinal position specified by integer, from the current alphanumeric collating sequence
	FUNCTION CHAR(${1:integer})$0
snippet FUNCTION CHAR-NATIONAL function character in the ordinal position specified by &lt;integer&gt; from the current national collating sequence
	FUNCTION CHAR-NATIONAL(${1:integer})$0
snippet FUNCTION COMBINED-DATETIME function combines integer-date and standard-numeric-time into a single numeric item from which both date and time components can be derived
	FUNCTION COMBINED-DATETIME(${1:integer-date},${2:standard-numeric-time})$0
snippet function concatenate function concatenates the string1.. string2 into a single string result
	function concatenate(${1:string1},${2:string2})$0
snippet FUNCTION COS function trigonometric cosine of angle
	FUNCTION COS(${1:angle})$0
snippet FUNCTION CURRENCY-SYMBOL function currency symbol character currently in effect for the locale under which the program is running
	FUNCTION CURRENCY-SYMBOL()$0
snippet FUNCTION CURRENT-DATE function current date and time as 21-character value
	FUNCTION CURRENT-DATE(${1:date-and-time-format})$0
snippet FUNCTION FORMATTED-DATE function formatted-date
	FUNCTION FORMATTED-DATE(${1:date-format},${2:integer-date})$0
snippet FUNCTION FORMATTED-DATETIME function formatted-datetime
	FUNCTION FORMATTED-DATETIME(${1:date-and-time-format},${2:integer-date},${3:standard-numeric-time},${4:offset_or_system_offset})$0
snippet FUNCTION FRACTION-PART portion of number that occurs to the right of the decimal point
	FUNCTION FRACTION-PART(${1:number})$0
snippet FUNCTION HIGHEST-ALGEBRAIC highest value that could possibly be stored in the specified numeric-identifier
	FUNCTION HIGHEST-ALGEBRAIC(${1:numeric-identifier})$0
snippet FUNCTION INTEGER greatest integer value that is less than or equal to number
	FUNCTION INTEGER(${1:number})$0
snippet FUNCTION INTEGER-OF-BOOLEAN numeric value of boolean-item
	FUNCTION INTEGER-OF-BOOLEAN(${1:boolean-item})$0
snippet FUNCTION INTEGER-OF-DATE converts yyyymmdd to an internal integer-date
	FUNCTION INTEGER-OF-DATE(${1:yyyymmdd})$0
snippet FUNCTION INTEGER-OF-DAY converts yyyymmdd to an internal integer-day
	FUNCTION INTEGER-OF-DAY(${1:yyyymmdd})$0
snippet FUNCTION INTEGER-OF-FORMATTED-DATE converts date in specified format to an internal integer
	FUNCTION INTEGER-OF-FORMATTED-DATE(${1:format},${2:date})$0
snippet FUNCTION INTEGER-PART portion of number that occurs to the left of the decimal point
	FUNCTION INTEGER-PART(${1:number})$0
snippet FUNCTION LENGTH returns the length (in character positions) of the specified item
	FUNCTION LENGTH(${1:item})$0
snippet FUNCTION LENGTH-AN returns the length (in bytes) of the specified item;
	FUNCTION LENGTH-AN(${1:item})$0
snippet FUNCTION LOCALE-COMPARE character '=' or '<' or '>' indicating the result of comparing argument1 and argument2 using a culturall
	FUNCTION LOCALE-COMPARE(${1:argument1},${2:argument2},${3:locale-optional})$0
snippet FUNCTION LOCALE-DATE format yyyymmd; according to locale
	FUNCTION LOCALE-DATE(${1:yyyymmdd},${2:locale-optional})$0
snippet FUNCTION LOCALE-TIME format time; according to locale
	FUNCTION LOCALE-TIME(${1:yyyymmdd},${2:locale-optional})$0
snippet FUNCTION LOCALE-TIME-FROM-SECONDS format integer-time (internal-format) according to locale
	FUNCTION LOCALE-TIME-FROM-SECONDS(${1:integer-time},${2:locale-optional})$0
snippet FUNCTION LOG format base e logarithm of number
	FUNCTION LOG(${1:number})$0
snippet FUNCTION LOG10 format base 10 logarithm of number
	FUNCTION LOG10(${1:number})$0
snippet FUNCTION LOWERCASE character string that contains string with any uppercase letters replaced by their corresponding lowercase letters
	FUNCTION LOWERCASE(${1:string})$0
snippet FUNCTION LOWEST-ALGEBRAIC lowest value that could possibly be stored in the specified numeric-identifier
	FUNCTION LOWEST-ALGEBRAIC(${1:numeric-identifier})$0
snippet FUNCTION MAX Alphanumeric/Index/Integer/National/Numeric maximum value from the specified list of numbers
	FUNCTION MAX(${1:number},${2:...})$0
snippet FUNCTION MEAN statistical mean value of the specified list of numbers
	FUNCTION MEAN(${1:number},${2:...})$0
snippet FUNCTION MEDIAN statistical median value of the specified list of numbers
	FUNCTION MEDIAN(${1:number},${2:...})$0
snippet FUNCTION MIDRANGE statistical midrange value of the specified list of numbers
	FUNCTION MIDRANGE(${1:number},${2:...})$0
snippet FUNCTION MIN statistical min value of the specified list of numbers
	FUNCTION MIN(${1:number},${2:...})$0
snippet FUNCTION MOD remainder from the division of value by modulus
	FUNCTION MOD(${1:value},${2:modulus})$0
snippet FUNCTION MONETARY-DECIMAL-POINT character used to separate the integer portion from the fractional part of a monetary currency value according to the current locale
	FUNCTION MONETARY-DECIMAL-POINT()$0
snippet FUNCTION MONETARY-THOUSANDS-SEPARATOR character used to separate the thousands digit groupings in a monetary currency value according to the current locale
	FUNCTION MONETARY-THOUSANDS-SEPARATOR()$0
snippet FUNCTION NATIONAL-OF convert alphanumeric-string to the national coded character set representation
	FUNCTION NATIONAL-OF(${1:alphanumeric-string},${2:replacement-char})$0
snippet FUNCTION NUMERIC-THOUSANDS-SEPARATOR character used to separate the thousands digit groupings in a numeric value according to the current locale
	FUNCTION NUMERIC-THOUSANDS-SEPARATOR()$0
snippet FUNCTION NUMVAL corresponding numeric value for string
	FUNCTION NUMVAL(${1:string})$0
snippet FUNCTION NUMVAL-C corresponding numeric value for string, case-sensitive if ANYCASE not given
	FUNCTION NUMVAL-C(${1:string},${2:currency-symbol}${3:,ANYCASE})$0
snippet FUNCTION NUMVAL-F corresponding numeric value for floating-point-string
	FUNCTION NUMVAL-F(${1:string})$0
snippet FUNCTION ORD ordinal position in the program character set corresponding to char
	FUNCTION ORD(${1:char},${2:...})$0
snippet FUNCTION ORD-MAX max. ordinal position in the program character set corresponding to list of chars
	FUNCTION ORD-MAX(${1:char},${2:...})$0
snippet FUNCTION ORD-MIN min. ordinal position in the program character set corresponding to list of chars
	FUNCTION ORD-MIN(${1:char},${2:...})$0
snippet FUNCTION PI pi
	FUNCTION PI()$0
snippet PI pi
	FUNCTION PI()$0
snippet FUNCTION PRESENT-VALUE approximation of the present value of a series of future period-end amount
	FUNCTION PRESENT-VALUE(${1:discount-rate},${2:amount},${3:...})$0
snippet FUNCTION RANDOM pseudo-random number 0> <1 from a rectangular distribution with optional seed
	FUNCTION RANDOM(${1:seed})$0
snippet FUNCTION RANGE value of the maximum argument minus the value of the minimum argument
	FUNCTION RANGE(${1:argument},${2:...})$0
snippet FUNCTION REM remainder of number divided by divisor
	FUNCTION REM(${1:number},${2:divisor})$0
snippet FUNCTION REVERSE reverse representation with same length of string
	FUNCTION REVERSE(${1:string})$0
snippet FUNCTION SECONDS-FROM-FORMATTED-TIME decode time according to format (a time format or a combined date and time format)
	FUNCTION SECONDS-FROM-FORMATTED-TIME(${1:format},${2:time})$0
snippet FUNCTION SECONDS-PAST-MIDNIGHT current time of day expressed as the total number of elapsed seconds since midnight
	FUNCTION SECONDS-PAST-MIDNIGHT()$0
snippet FUNCTION SIGN sign representation of number as -1, 0, 1
	FUNCTION SIGN(${1:number})$0
snippet FUNCTION SIN trigonometric sine of the specified angle
	FUNCTION SIN(${1:angle})$0
snippet FUNCTION SQRT aproximation of the square root of number
	FS
	FUNCTION SQRT(${1:number})$0
snippet FUNCTION TAN trigonometric tangent of the specified angle
	FT
	FUNCTION TAN(${1:angle})$0
snippet FU character string that contains string with any lowercase letters replaced by their corresponding uppercase letters
	FUNCTION UPPER-CASE(${1:string})$0
snippet FUNCTION UPPER-CASE character string that contains string with any lowercase letters replaced by their corresponding uppercase letters
	FUNCTION UPPER-CASE(${1:string})$0
snippet FUNCTION VARIANCE statistical variance of the specified list of number argument
	FUNCTION VARIANCE(${1:number},${2:...})$0
snippet FY convert yy to yyyy with optional yy-cutoff to delineate centuries
	FUNCTION YEAR-TO-YYYY(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0
snippet FUNCTION YEAR-TO-YYYY convert yy to yyyy with optional yy-cutoff to delineate centuries
	FUNCTION YEAR-TO-YYYY(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0
snippet function formatted-time function formatted-time
	function formatted-time(${1:time-format},${2:standard-numeric-time},${3:offset_or_system_offset})$0
snippet IDENTIFICATION Template for program (CICS)
	        IDENTIFICATION DIVISION. 
	        PROGRAM-ID. $1.
	        DATA DIVISION.
	        WORKING-STORAGE SECTION. 
	        01 OUT-MSG.
	         02 FILLER PIC X(6) VALUE "Hello ". 
	         02 MSG    PIC X(20).
	        01 INP-MSG PIC X(20) VALUE "What is your name? ".     
	        PROCEDURE DIVISION.
	        PARA1.
	            EXEC CICS
	                 SEND FROM(INP-MSG)
	                 ERASE
	            END-EXEC
	
	            EXEC CICS
	                 RECEIVE INTO (MSG)
	            END-EXEC
	
	       *
	            EXEC CICS
	                 SEND FROM (OUT-MSG)
	                 ERASE
	            END-EXEC
	
	            EXEC CICS
	                 RETURN
	            END-EXEC.
	
	       *
	        END PROGRAM $1.
	
snippet IDENTIFICATION DIVISION
	IDENTIFICATION DIVISION.
	$0
snippet ID
	IDENTIFICATION DIVISION.
	$0
snippet ie
	IF ${1:CONDITION}
	   $0
	END-IF
snippet IF
	IF ${1:CONDITION}
	   $0
	END-IF
snippet IF
	IF ${1:CONDITION}
	   $0
	ELSE
	   
	END-IF
snippet IEE
	IF ${1:CONDITION}
	   $0
	ELSE
	   
	END-IF
snippet INSPECT INSPECT CONVERTING
	INSPECT $1 CONVERTING '${2:ABCDEFGHIJKLMNOPQRSTUVWXYZ}' to '${3:abcdefghijklmnopqrstuvwxyz}'
snippet INSPECT INSPECT REPLACING
	INSPECT $1 REPLACING ALL ${2|SPACES,ZERO|} BY '$3'
snippet INSPECT Inspect a tallying counter for ...
	MOVE 0 to ${2:COUNTER}
	INSPECT ${1:SOURCE} TALLYING ${2:COUNTER} FOR \${3|ALL SPACES,ALL $4,CHARACTERS|}
snippet LINKAGE SECTION
	LINKAGE SECTION.
	$0
snippet LKS
	LINKAGE SECTION.
	$0
snippet LS
	LINKAGE SECTION.
	$0
snippet MULTIPLY MULTIPLY a BY y GIVING z
	MULTIPLY ${1:a} BY ${2:b} GIVING ${3:c}
snippet MG MULTIPLY a BY y GIVING z
	MULTIPLY ${1:a} BY ${2:b} GIVING ${3:c}
snippet PERFORM PERFORM paragraph x TIMES
	PERFORM ${1:paragraph-name} ${2:value-1} TIMES
snippet PE PERFORM paragraph x TIMES
	PERFORM ${1:paragraph-name} ${2:value-1} TIMES
snippet PV INLINE PERFORM VARYING
	PERFORM ${1:paragraph-name} VARYING ${2:field-1}
	 FROM ${3:value-1} BY ${4:value-2}
	 UNTIL ${5:condition}
	$0
snippet PERFORM INLINE PERFORM VARYING
	PERFORM ${1:paragraph-name} VARYING ${2:field-1}
	 FROM ${3:value-1} BY ${4:value-2}
	 UNTIL ${5:condition}
	$0
snippet PE PERFORM .. END-PERFORM
	PERFORM $1
		$2
	END-PERFORM
	$0
snippet PERFORM PERFORM .. END-PERFORM
	PERFORM $1
		$2
	END-PERFORM
	$0
snippet PD
	PROCEDURE DIVISION.
	$0
snippet PROCEDURE DIVISION
	PROCEDURE DIVISION.
	$0
snippet STRING string delimited by size
	STRING ${1:item1} DELIMITED BY SIZE
	       ${2:item2} DELIMITED BY SIZE
	       INTO ${3:result}
	END-STRING
	$0
snippet SUBTRACT SUBTRACT a FROM b GIVING c
	SUBTRACT ${1:a} FROM ${2:b} GIVING ${3:c}
snippet WORKING-STORAGE
	WORKING-STORAGE SECTION.
	$0
snippet WS
	WORKING-STORAGE SECTION.
	$0
snippet accept
	accept ${1:variable}
	$0
snippet accept accept from date/day/week/time
	accept ${1:variable} ${2|from date,from day,from day-of-week,time|}
	$0
snippet add Add a to b giving c
	add ${1:a} to ${2:b} giving ${3:c}
snippet call CALL literal
	call "$1" using
	    by ${2|value,reference,content|} ${3:identifer}
	    returning ${4:return-code}
	end-call
	$0
snippet cancel CANCEL literal
	cancel "$1"
	$0
snippet class-id class with ctor
	       class-id $1 ${3|public,private|}.
	
	       method-id new public.
	       procedure division.
	           $0
	           exit method.
	       end method.
	
	       end class.
snippet copy Copy replacing
	copy "${1:subprog.cpy}"
	    replacing ==${2:()}== by ==${3:lnk-}==.
snippet dd
	data division.
	$0
snippet data division
	data division.
	$0
snippet delimited by size delimited by size (string)
	delimited by size
snippet dbs delimited by size (string)
	delimited by size
snippet ds delimited by size (string)
	delimited by space
snippet delimited by space delimited by size (string)
	delimited by space
snippet $set
	\$set dialect"${2|ans85,bs2000,bs2000-offload,cob370,cob371,cob372,mf,mvs,os390,osvs,vsc21,vsc22,vsc23,vsc24|}"
	$0
snippet display display literal
	display "$0"
snippet divide divide a by b giving [remainder}
	divide ${1:a} by ${2:b} giving ${3:c} ${4:remainder ${5:d}}
snippet dgr divide a by b giving [remainder}
	divide ${1:a} by ${2:b} giving ${3:c} ${4:remainder ${5:d}}
snippet entry entry statement
	$1-ep section.
	entry "$1".
	    $0	
	    goback.
	
snippet eg entry statement
	$1-ep section.
	entry "$1".
	    $0	
	    goback.
	
snippet ei enum-id
	*>> <summary>enum-id $1</summary>
	enum-id. $1 as "Status".
	    78 ${2:Item}  value ${3:1}.
	end enum $1.
	
snippet enum-id enum-id
	*>> <summary>enum-id $1</summary>
	enum-id. $1 as "Status".
	    78 ${2:Item}  value ${3:1}.
	end enum $1.
	
snippet environment division
	environment division.
	$0
snippet ed
	environment division.
	$0
snippet evaluate evaluate
	evaluate $1
	    when $2
	       $0
	    when other
	       continue
	end-evaluate
	
snippet ee evaluate
	evaluate $1
	    when $2
	       $0
	    when other
	       continue
	end-evaluate
	
snippet exec exec sql include
	exec sql include sqlca end-exec.
snippet exec exec sql declare
	exec sql begin declare section end-exec.
	$0
	exec sql end declare section end-exec.
snippet ep EXIT PROGRAM
	exit program returning ${1:item}
snippet exit EXIT PROGRAM
	exit program returning ${1:item}
snippet function abs function absolute value of number
	function abs(${1:number})$0
snippet function acos function trigonometric arc-cosine, or inverse cosine, of cosine
	function acos(${1:cosine})$0
snippet function annuity function annuity
	function annuity(${1:interest-rate},${2:number-of-periods})$0
snippet function asin function trigonometric arc-sine, or inverse sine, of sine
	function asin(${1:sine})$0
snippet function atan function trigonometric arc-tangent, or inverse tangent, of tangent
	function atan(${1:tangent})$0
snippet function boolean-of-integer function boolean item of usage bit representing the binary value of integer; with the given length
	function boolean-of-integer(${1:integer},${2:length})$0
snippet function byte-length function byte-length (in bytes) of item
	function byte-length(${1:integer})$0
snippet function char function character in the ordinal position specified by integer, from the current alphanumeric collating sequence
	function char(${1:integer})$0
snippet function char-national function character in the ordinal position specified by &lt;integer&gt; from the current national collating sequence
	function char-national(${1:integer})$0
snippet function combined-datetime function combines integer-date and standard-numeric-time into a single numeric item from which both date and time components can be derived
	function combined-datetime(${1:integer-date},${2:standard-numeric-time})$0
snippet function concatenate function concatenates the string1.. string2 into a single string result
	function concatenate(${1:string1},${2:string2})$0
snippet function cos function trigonometric cosine of angle
	function cos(${1:angle})$0
snippet function currency-symbol function currency symbol character currently in effect for the locale under which the program is running
	function currency-symbol()$0
snippet function current-date function current date and time as 21-character value
	function current-date(${1:date-and-time-format})$0
snippet function formatted-date function formatted-date
	function formatted-date(${1:date-format},${2:integer-date})$0
snippet function formatted-datetime function formatted-datetime
	function formatted-datetime(${1:date-and-time-format},${2:integer-date},${3:standard-numeric-time},${4:offset_or_system_offset})$0
snippet function formatted-time function formatted-time
	function formatted-time(${1:time-format},${2:standard-numeric-time},${3:offset_or_system_offset})$0
snippet function fraction-part portion of number that occurs to the right of the decimal point
	function fraction-part(${1:number})$0
snippet function highest-algebraic highest value that could possibly be stored in the specified numeric-identifier
	function highest-algebraic(${1:numeric-identifier})$0
snippet function integer greatest integer value that is less than or equal to number
	function integer(${1:number})$0
snippet function integer-of-boolean numeric value of boolean-item
	dunction integer-of-boolean(${1:boolean-item})$0
snippet function integer-of-date converts yyyymmdd to an internal integer-date
	function integer-of-date(${1:yyyymmdd})$0
snippet function integer-of-day converts yyyymmdd to an internal integer-day
	function integer-of-day(${1:yyyymmdd})$0
snippet function integer-of-formatted-date converts date in specified format to an internal integer
	function integer-of-formatted-date(${1:format},${2:date})$0
snippet function integer-part portion of number that occurs to the left of the decimal point
	function integer-part(${1:number})$0
snippet function length returns the length (in character positions) of the specified item
	function length(${1:item})$0
snippet function length-an returns the length (in bytes) of the specified item;
	function length-an(${1:item})$0
snippet function locale-compare character '=' or '<' or '>' indicating the result of comparing argument1 and argument2 using a culturall
	function locale-compare(${1:argument1},${2:argument2},${3:locale-optional})$0
snippet function locale-date format yyyymmd; according to locale
	function locale-date(${1:yyyymmdd},${2:locale-optional})$0
snippet function locale-time format time; according to locale
	function locale-time(${1:yyyymmdd},${2:locale-optional})$0
snippet function locale-time-from-seconds format integer-time (internal-format) according to locale
	function locale-time-from-seconds(${1:integer-time},${2:locale-optional})$0
snippet function log format base e logarithm of number
	function log(${1:number})$0
snippet function log10 format base 10 logarithm of number
	function log10(${1:number})$0
snippet function lowercase character string that contains string with any uppercase letters replaced by their corresponding lowercase letters
	function lowercase(${1:string})$0
snippet function lowest-algebraic lowest value that could possibly be stored in the specified numeric-identifier
	function lowest-algebraic(${1:numeric-identifier})$0
snippet function max Alphanumeric/Index/Integer/National/Numeric maximum value from the specified list of numbers
	function max(${1:number},${2:...})$0
snippet function mean statistical mean value of the specified list of numbers
	function mean(${1:number},${2:...})$0
snippet function median statistical median value of the specified list of numbers
	function median(${1:number},${2:...})$0
snippet function midrange statistical midrange value of the specified list of numbers
	function midrange(${1:number},${2:...})$0
snippet function min statistical min value of the specified list of numbers
	function min(${1:number},${2:...})$0
snippet function mod remainder from the division of value by modulus
	function mod(${1:value},${2:modulus})$0
snippet function monetary-decimal-point character used to separate the integer portion from the fractional part of a monetary currency value according to the current locale
	function monetary-decimal-point()$0
snippet function monetary-thousands-separator character used to separate the thousands digit groupings in a monetary currency value according to the current locale
	function monetary-thousands-separator()$0
snippet function national-of convert alphanumeric-string to the national coded character set representation
	function national-of(${1:alphanumeric-string},${2:replacement-char})$0
snippet function numeric-thousands-separator character used to separate the thousands digit groupings in a numeric value according to the current locale
	function numeric-thousands-separator()$0
snippet function numval corresponding numeric value for string
	function numval(${1:string})$0
snippet function numval-c corresponding numeric value for string, case-sensitive if ANYCASE not given
	function numval-c(${1:string},${2:currency-symbol}${3:,ANYCASE})$0
snippet function numval-f corresponding numeric value for floating-point-string
	function numval-f(${1:string})$0
snippet function ord ordinal position in the program character set corresponding to char
	function ord(${1:char},${2:...})$0
snippet function ord-max max. ordinal position in the program character set corresponding to list of chars
	function ord-max(${1:char},${2:...})$0
snippet function ord-min min. ordinal position in the program character set corresponding to list of chars
	function ord-min(${1:char},${2:...})$0
snippet function pi pi
	function pi()$0
snippet function present-value approximation of the present value of a series of future period-end amount
	function present-value(${1:discount-rate},${2:amount},${3:...})$0
snippet function random pseudo-random number 0> <1 from a rectangular distribution with optional seed
	function random(${1:seed})$0
snippet function range value of the maximum argument minus the value of the minimum argument
	function range(${1:argument},${2:...})$0
snippet function rem remainder of number divided by divisor
	function rem(${1:number},${2:divisor})$0
snippet function reverse reverse representation with same length of string
	function reverse(${1:string})$0
snippet function seconds-from-formatted-time decode time according to format (a time format or a combined date and time format)
	function seconds-from-formatted-time(${1:format},${2:time})$0
snippet function seconds-past-midnight current time of day expressed as the total number of elapsed seconds since midnight
	function seconds-past-midnight()$0
snippet function sign sign representation of number as -1, 0, 1
	function sign(${1:number})$0
snippet function sin trigonometric sine of the specified angle
	function sin(${1:angle})$0
snippet function sqrt aproximation of the square root of number
	function sqrt(${1:number})$0
snippet function tan trigonometric tangent of the specified angle
	function tan(${1:angle})$0
snippet function upper-case character string that contains string with any lowercase letters replaced by their corresponding uppercase letters
	function upper-case(${1:string})$0
snippet function variance statistical variance of the specified list of number argument
	function variance(${1:number},${2:...})$0
snippet function year-to-yyyy convert yy to yyyy with optional yy-cutoff to delineate centuries
	function year-to-yyyy(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0
snippet identification division
	identification division.
	$0
snippet id
	identification division.
	$0
snippet if
	if ${1:condition}
	   $0
	end-if
snippet ie
	if ${1:condition}
	   $0
	end-if
snippet if
	if ${1:condition}
	   $0
	else
	   
	end-if
snippet iee
	if ${1:condition}
	   $0
	else
	   
	end-if
snippet inspect inspect converting
	inspect $1 converting '${2:ABCDEFGHIJKLMNOPQRSTUVWXYZ}' to '${3:abcdefghijklmnopqrstuvwxyz}'
snippet inspect inspect replacing
	inspect $1 replacing all ${2|spaces,zero|} by '$3'
snippet inspect Inspect a tallying counter for ...
	move 0 to ${2:counter}
	inspect ${1:source} tallying ${2:counter} for \${3|all spaces,all $4,characters|}
snippet linkage section
	linkage section.
	$0
snippet ls
	linkage section.
	$0
snippet lks
	linkage section.
	$0
snippet local-storage
	local-storage section.
	$0
snippet ls
	local-storage section.
	$0
snippet main method-id (main)
	*>> <summary>method main</summary>
	method-id main public static.
	procedure division using
	           by value args as string occurs any.
	    $0
	end method.
	
snippet mi method-id
	*>> <summary>method $1</summary>
	method-id $1.
	procedure division.
	    $0
	end method.
	
snippet method-id method-id
	*>> <summary>method $1</summary>
	method-id $1.
	procedure division.
	    $0
	end method.
	
snippet multiply Multiply a by y giving z
	multiply ${1:a} by ${2:b} giving ${3:c}
snippet mg Multiply a by y giving z
	multiply ${1:a} by ${2:b} giving ${3:c}
snippet pt perform paragraph x times
	perform ${1:paragraph-name} ${2:value-1} times
snippet perform perform paragraph x times
	perform ${1:paragraph-name} ${2:value-1} times
snippet pv inline perform varying
	perform ${1:paragraph-name} varying ${2:field-1}
	 from ${3:value-1} by ${4:value-2}
	 until ${5:condition}
	$0
snippet perform inline perform varying
	perform ${1:paragraph-name} varying ${2:field-1}
	 from ${3:value-1} by ${4:value-2}
	 until ${5:condition}
	$0
snippet pe perform .. end-perform
	perform $1
		$2
	end-perform
	$0
snippet perform perform .. end-perform
	perform $1
		$2
	end-perform
	$0
snippet pd
	procedure division.
	$0
snippet procedure division
	procedure division.
	$0
snippet property set/get property
	01 ${2:_prop} ${3:binary-long} private.
	method-id. get property #${1:Prop}.
	procedure division returning ret as ${3:binary-long}.
	    set ret to ${2:_prop}
	end method.
	method-id. set property #${1:Prop}.
	procedure division using by value val as ${3:binary-long}.
	    set ${2:_prop} to 0
	end method.
	
snippet ruler
	|...+.*..1....+....2....+....3....+....4....+....5....+....6....+....7..
snippet $set
	\$set sourceformat"${2|free,variable,fixed|}"
	$0
snippet string string delimited by size
	string ${1:item1} delimited by size
	       ${2:item2} delimited by size
	       into ${3:result}
	end-string
	$0
snippet subtract subtract a from b giving c
	subtract ${1:a} from ${2:b} giving ${3:c}
snippet try try catch
	try
	$2
	catch ${1:Exception}
	$0
	end-try
snippet valuetype-id valuetype
	valuetype-id $1 ${2:public}.
	01 item string ${2:public}.
	
	method-id new ${2:public}.
	procedure division.
	   $0
	end method.
	
	end valuetype.
snippet vi valuetype
	valuetype-id $1 ${2:public}.
	01 item string ${2:public}.
	
	method-id new ${2:public}.
	procedure division.
	   $0
	end method.
	
	end valuetype.
snippet ws
	working-storage section.
	$0
snippet working-storage
	working-storage section.
	$0

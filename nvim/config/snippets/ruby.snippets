# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet class
	class ${1:ClassName}
		$0
	end
snippet class init
	class ${1:ClassName}
		def initialize
			$0
		end
	end
snippet begin
	begin
		$1
	rescue => exception
		
	end
snippet begin else
	begin
		$1
	rescue => exception
		
	else
		
	end
snippet begin else ensure
	begin
		$1
	rescue => exception
		
	else
		
	ensure
		
	end
snippet begin ensure
	begin
		$1
	rescue => exception
		
	ensure
		
	end
snippet rdesc
	RSpec.describe ${1:described_class} do
		$0
	end
snippet allow
	allow(${1:object}).to $0
snippet rw
	attr_accessor :${0:attr_names}
snippet r
	attr_reader :${0:attr_names}
snippet w
	attr_writer :${0:attr_names}
snippet bef
	before :${1:each} do
		$0
	end
snippet debug
	require 'byebug'; byebug
snippet cont
	context '${1:message}' do
		$0
	end
snippet {p
	{ ${1:|${2:variable}| }$0 
snippet {P
	{ ${1:|${2:variable}| }$0 
snippet descm
	describe '${1:#method}' do
		${0:pending 'Not implemented'}
	end
snippet desc
	describe ${1:described_class} do
		$0
	end
snippet do
	do
		$0
	end
snippet dov
	do |${1:v}|
		$0
	end
snippet dop
	do |${1:variable}|
		$0
	end
snippet do
	do
		$0
	end
snippet eawi
	each_with_index { |${1:e}, ${2:i}| $0 }
snippet eawid
	each_with_index do |${1:e}, ${2:i}|
		$0
	end
snippet ea
	each { |${1:e}| $0 }
snippet ead
	each do |${1:e}|
		$0
	end
snippet enc
	# encoding: utf-8$0
snippet exp
	expect(${1:object}).to $0
snippet expb
	expect { ${1:object} }.to $0
snippet experr
	expect { ${1:object} }.to raise_error ${2:StandardError}
snippet frozen
	# frozen_string_literal: true$0
snippet ivc
	@${1:variable_name} ||= ${0:cached_value}
snippet b
	{ |${1:var}| $0 }
snippet irb
	binding.irb
snippet it
	it '${1:spec_name}' do
		$0
	end
snippet ibl
	it_behaves_like '${0:shared examples name}'
snippet :
	${1:key}: ${2:value}
snippet ->
	-> { $0 }
snippet ->a
	->(${1:args}) { $0 }
snippet let
	let(:${1:object}) { $0 }
snippet let!
	let!(:${1:object}) { $0 }
snippet map
	map { |${1:e}| $0 }
snippet mapd
	map do |${1:e}|
		$0
	end
snippet pry
	require 'pry'; binding.pry
snippet red
	reduce(${1:init}) { |${2:mem}, ${3:var}| $0 }
snippet redd
	reduce(${1:init}) do |${2:mem}, ${3:var}|
		$0
	end
snippet req
	require '$1'$0
snippet reqr
	require_relative '$1'$0
snippet shared
	shared_examples '${0:shared examples name}'
snippet subj
	subject(:${1:name}) { $0 }
snippet module
	module ${1:ModuleName}
		$0
	end
snippet rake Create a Rake Task
	namespace :$1 do
		desc "$2"
		task $3: :environment do
			$4
		end
	end
snippet am
	alias_method :${1:new_name}, :${0:old_name}
snippet case
	case ${1:test}
	when $2
		$3
	when $4
		$5
	else
		$6
	end
snippet defs
	def self.${1:method_name}
		$0
	end
snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${0:new_name}
snippet for
	for ${1:value} in ${2:enumerable} do
		$0
	end
snippet loop
	loop do
		$0
	end
snippet if
	if ${1:test}
		$0
	end
snippet if else
	if ${1:test}
		$0
	else
		
	end
snippet if elsif
	if ${1:test}
		$0
	elsif 
		
	end
snippet if elsif else
	if ${1:test}
		$0
	elsif 
		
	else
		
	end
snippet definit
	def initialize(${1:args})
		$0
	end
snippet def
	def ${1:method_name}
		$0
	end
snippet defmm
	def method_missing(meth, *args, &blk)
		$0
	end
snippet unless
	unless ${1:test}
		$0
	end
snippet until
	until ${1:test}
		$0
	end
snippet while
	while ${1:test}
		$0
	end

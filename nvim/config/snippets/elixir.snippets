# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet pry
	require IEx; IEx.pry
	$0
snippet ins
	IO.inspect($0)
snippet insl
	IO.inspect($1, label: "$0")
snippet put
	IO.puts($0)
snippet al
	~w($0)a
snippet case
	case $1 do
	  $2 -> 
	    $0
	end
snippet cond
	cond do
	  $1 -> 
	  $0
	end
snippet def Define a function
	def ${1:name}() do
	  $0
	end
snippet defd
	@doc """
	${1:doc}
	"""
	def ${2:name} do
	  $0
	end
snippet defsd
	@doc """
	${1:doc}
	"""
	@spec ${2:name}(${3:args}) :: ${4:no_return}
	def $2{5:args} do
	  $0
	end
snippet defs
	@spec ${1:name}(${2:args}) :: ${3:no_return}
	def $1{4:args} do
	  $0
	end
snippet defmo Define a module
	defmodule ${1:module} do
	  $0
	end
snippet defp Define a private function
	defp ${1:name}() do
	  $0
	end
snippet desc
	describe "${1:test group subject}" do
	  $0
	end
snippet doc
	@doc """
	$0
	"""
snippet docf
	@doc false
snippet docs
	@doc ~S"""
	$0
	"""
snippet for
	for ${1:item} <- ${2:items} do
	  $0
	end
snippet ife
	if ${1:condition} do
	  $2
	else
	  $0
	end
snippet if
	if ${1:condition} do
	  $0
	end
snippet if:
	if ${1:condition}, do: $0
snippet ife:
	if ${1:condition}, do: $2, else: $0
snippet mdoc
	@moduledoc """
	$0
	"""
snippet mdocf
	@moduledoc false
snippet mdocs
	@moduledoc ~S"""
	$0
	"""
snippet p
	|> $0
snippet >e
	|> Enum.each($0)
snippet >f
	|> Enum.filter($0)
snippet >m
	|> Enum.map($0)
snippet >r
	|> Enum.reduce(${1:acc}, fn $2, ${3:acc} -> $0 end)
snippet req
	require ${0:Logger}
snippet test
	test ${1:name} do
	  $0
	end
snippet wl
	~w($0)

# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet app Object extending App
	object ${1:App} extends App {
		${2:println("Hello, world!")}
	}
snippet case_class Case class
	case class ${1:CaseClassName}(${2:argName}: ${3:ArgType})
snippet class Class
	class ${1:ClassName} {
		${2:println("Hello, world!")}
	}
snippet def Method
	def ${1:methodName}(${2:argName}: ${3:ArgType}): ${4:ReturnType} = {
		${5:println("Hello, world!")}
	}
snippet def_short Method as one-liner
	def ${1:methodName}(${2:argName}: ${3:ArgType}): ${4:ReturnType} = ${5:println("Hello, world!")}
snippet for For loop
	for (${1:element} <- elements) {
		${2:println(element.toString)}
	}
snippet ifelse Branch based on conditions using if/else
	if (${1:condition}) {
		${2:println("Hello, world!")}
	} else {
		${2:println("Hello, world!")}
	}
snippet obj_main Object with main method
	object ${1:ObjectName} {
		def main(args: Array[String]): Unit = {
			${2:println("Hello, world!")}
		}
	}
snippet match Branch based on conditions using pattern matching
	${1:x} match {
		case ${2:0} => ${3:"zero"}
		case ${4:1} => ${5:"one"}
	}
snippet object Object
	object ${1:ObjectName} {
		${2:println("Hello, world!")}
	}
snippet trait Trait
	trait ${1:TraitName} {
		\${2:}
	}
snippet while While loop
	while(${1:condition}) {
		${2:println("Hello, world!")}
	}

# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet && In the expression a && b, the subexpression b is only evaluated if a evaluates to true.
	${1:condition} && ${2:expression}
snippet baremodule Code snippet for module block.
	baremodule ${1:name}
		$0
	end
snippet bare Code snippet for module block.
	baremodule ${1:name}
		$0
	end
snippet bmod Code snippet for module block.
	baremodule ${1:name}
		$0
	end
snippet begin Code snippet to create a begin block.
	begin
		$0
	end
snippet be Code snippet to create a begin block.
	begin
		$0
	end
snippet band Code snippet for bitwise and operator.
	${1:value} & ${2:value}
snippet bnot Code snippet for bitwise not operator.
	~${1:value}
snippet bor Code snippet for bitwise or operator.
	${1:value} | ${2:value}
snippet xor Code snippet for bitwise xor (exclusive or) operator.
	${1:value} ⊻ ${2:value}
snippet cclock Code snippet for calling the clock function from the standard C library.
	ccall(:clock, Int32, ())
snippet clock Code snippet for calling the clock function from the standard C library.
	ccall(:clock, Int32, ())
snippet ccal An example for ccal.
	function ${1:name}(a, b)::Cint
		return a + b
	end
	
	${1:name}_c = @cfunction(${1:name}, Cint, (Cint, Cint))
	ccall(${1:name}_c, Cint, (Cint, Cint), 1, 1)
snippet cfun An example for ccal.
	function ${1:name}(a, b)::Cint
		return a + b
	end
	
	${1:name}_c = @cfunction(${1:name}, Cint, (Cint, Cint))
	ccall(${1:name}_c, Cint, (Cint, Cint), 1, 1)
snippet cfunction An example for ccal.
	function ${1:name}(a, b)::Cint
		return a + b
	end
	
	${1:name}_c = @cfunction(${1:name}, Cint, (Cint, Cint))
	ccall(${1:name}_c, Cint, (Cint, Cint), 1, 1)
snippet comp Code snippet for complex number.
	(${1:Int} + ${2:Int}im)
snippet im Code snippet for complex number.
	(${1:Int} + ${2:Int}im)
snippet complex Code snippet for complex number.
	(${1:Int} + ${2:Int}im)
snippet else Code snippet for else statement.
	else
		$0
	end
snippet elseif Code snippet for elseif statement.
	elseif ${1:condition}
		${2:block}
	end
snippet for Code snippet to create a for loop.
	for ${1:value}=${2:index}:${3:index}
		$0
	end
snippet forin Code snippet to iterate each element.
	for ${1:value} ∈ ${2:iterable}
		$0
	end
snippet foreach Code snippet to iterate each element.
	for ${1:value} ∈ ${2:iterable}
		$0
	end
snippet fun Code snippet to create a function.
	function ${1:name}(${2:arguments})
		$0
	end
snippet func Code snippet to create a function.
	function ${1:name}(${2:arguments})
		$0
	end
snippet function Code snippet to create a function.
	function ${1:name}(${2:arguments})
		$0
	end
snippet composition Code snippet for function composition.
	(${1:fonction} ∘ ${2:fonction})(${3:args})
snippet fcomp Code snippet for function composition.
	(${1:fonction} ∘ ${2:fonction})(${3:args})
snippet if Code snippet for if statement.
	if ${1:condition}
		$0
	end
snippet ifelseif Code snippet for if-elseif-else statement.
	if ${1:condition}
		${2:block}
	elseif ${3:condition}
		${4:block}
	else
		${5:block}
	end
snippet import Code snippet for import a package.
	import $0
snippet im Code snippet for import a package.
	import $0
snippet as Code snippet for import a package and rename.
	import ${1:package} as ${2:name}
snippet import Code snippet for import a package and rename.
	import ${1:package} as ${2:name}
snippet im Code snippet for import a package and rename.
	import ${1:package} as ${2:name}
snippet import Code snippet for import something from a package.
	import ${1:package}: ${2:exports}
snippet from Code snippet for import something from a package.
	import ${1:package}: ${2:exports}
snippet im Code snippet for import something from a package.
	import ${1:package}: ${2:exports}
snippet im Code snippet for import something from a package and rename.
	import ${1:package}: ${2:exports} as ${3:name}
snippet as Code snippet for import something from a package and rename.
	import ${1:package}: ${2:exports} as ${3:name}
snippet from Code snippet for import something from a package and rename.
	import ${1:package}: ${2:exports} as ${3:name}
snippet import Code snippet for import something from a package and rename.
	import ${1:package}: ${2:exports} as ${3:name}
snippet iterate Code snippet to iterate each element.
	next = iterate(${1:iterable})
	while next !== nothing
		(item, state) = next
		0
		next = iterate(iter, state)
	end
snippet iter Code snippet to iterate each element.
	next = iterate(${1:iterable})
	while next !== nothing
		(item, state) = next
		0
		next = iterate(iter, state)
	end
snippet main Code snippet to create a main block.
	function main()
		$0
	end
	
	main()
snippet map Code snippet for map.
	map(x -> ${1:expr}, ${2:iterable})
snippet module Code snippet for module block.
	module ${1:name}
	export ${2:struct}
	struct ${2:struct} end
		$0
	end
snippet mod Code snippet for module block.
	module ${1:name}
	export ${2:struct}
	struct ${2:struct} end
		$0
	end
snippet mstruct Code snippet for mutable struct block.
	mutable struct ${1:struct} <: ${2:type}
		$0
	end
snippet mutable Code snippet for mutable struct block.
	mutable struct ${1:struct} <: ${2:type}
		$0
	end
snippet mut Code snippet for mutable struct block.
	mutable struct ${1:struct} <: ${2:type}
		$0
	end
snippet || In the expression a || b, the subexpression b is only evaluated if a evaluates to false.
	${1:condition} || ${2:expression}
snippet parsef Code snippet for parsing a String to Float64.
	parse(Float64, "${1:value}")
snippet pfloat Code snippet for parsing a String to Float64.
	parse(Float64, "${1:value}")
snippet parsei Code snippet for parsing a String to Int64.
	parse(Int64, "${1:value}")
snippet pint Code snippet for parsing a String to Int64.
	parse(Int64, "${1:value}")
snippet parse Code snippet for parse an expression.
	Meta.parse("{$1:expression}")
snippet meta Code snippet for parse an expression.
	Meta.parse("{$1:expression}")
snippet pp Code snippet for pipe expression.
	${1:value} |> ${2:function}
snippet pipe Code snippet for pipe expression.
	${1:value} |> ${2:function}
snippet pp. Code snippet for pointwise pipe expression.
	${1:value} .|> ${2:function}
snippet pipe. Code snippet for pointwise pipe expression.
	${1:value} .|> ${2:function}
snippet ppipe Code snippet for pointwise pipe expression.
	${1:value} .|> ${2:function}
snippet struct Code snippet for struct block.
	struct ${1:struct} <: ${2:type}
		$0
	end
snippet ?: Code snippet for ternary operator statement.
	${1:condition} ? ${2:expression} : ${3:expression}
snippet using Code snippet for using a package.
	using $0
snippet us Code snippet for using a package.
	using $0
snippet us Code snippet for using a package and rename.
	using ${1:package} as ${2:name}
snippet as Code snippet for using a package and rename.
	using ${1:package} as ${2:name}
snippet using Code snippet for using a package and rename.
	using ${1:package} as ${2:name}
snippet from Code snippet for using something from a package.
	using ${1:package}: ${2:exports}
snippet us Code snippet for using something from a package.
	using ${1:package}: ${2:exports}
snippet using Code snippet for using something from a package.
	using ${1:package}: ${2:exports}
snippet as Code snippet for using something from a package and rename.
	using ${1:package}: ${2:exports} as ${3:name}
snippet us Code snippet for using something from a package and rename.
	using ${1:package}: ${2:exports} as ${3:name}
snippet from Code snippet for using something from a package and rename.
	using ${1:package}: ${2:exports} as ${3:name}
snippet using Code snippet for using something from a package and rename.
	using ${1:package}: ${2:exports} as ${3:name}
snippet while Code snippet to create a while loop.
	while ${1:condition}
		$0
	end

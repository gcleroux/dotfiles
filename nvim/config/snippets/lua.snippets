# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet ll create a variable
	local ${1:varName} = ${0:value}
snippet cl Create a class
	${1:className} = {}
	
	$1.${2:new} = function($3)
		local ${4:varName} = ${5:value}
	
		${6: --code}
	
		return $4
	end
snippet elseif
	elseif ${1:true} then
		$0
snippet for for loop range
	for ${1:i}=${2:1},${3:10} do
		$0
	end
snippet foreach
	for i, ${1:x} in pairs(${2:table}) do
		$0
	end
snippet forline read file line by line
	f = io.open(${1:"${2:filename}"}, "${3:r}")
	
	while true do
		line = f:read()
		if line == nil then break end
	
		${0:-- code}
	end
snippet fu
	function ${1:name}($2)
		${0:-- code}
	end
snippet if
	if ${1:true} then
		$0
	end
snippet f=
	local ${1:name} = function($2)
		${0:-- code}
	end
snippet l create a variable
	local $0
snippet lpca Protect call a function as a variable
	local ${1:status}, ${2:err_or_value} = pcall(${3:function})
snippet lreq Require module as a variable
	local ${1:var} = require("${2:module}")
snippet pca Protect call a function
	pcall(${1:function})
snippet p
	print($0)
snippet req Require module
	require("${1:module}")
snippet rt return value
	return $0
snippet self:
	function self:${1:methodName}($2)
		$0
	end
snippet status_ok Create the status_ok call to ensure that the plugin in installed before configuring.
	local $1_status_ok, ${2:_} = pcall(require, "${3:_}")
	if not $1_status_ok then
		vim.notify("Plugin $3 is missing")
		return
	end
	
	
snippet while
	while ${1:true} do
		$0
	end

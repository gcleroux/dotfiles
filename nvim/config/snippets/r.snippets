# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})
snippet el
	else {
	    $0
	}
	
snippet ei
	else if (${1:condition}) {
	    $0
	}
	
snippet for
	for (${1:variable} in ${2:vector}) {
	    $0
	}
	
snippet fun
	${1:name} <- function(${2:variables}) {
	    $0
	}
	
snippet if
	if (${1:condition}) {
	    $0
	}
	
snippet lapply
	lapply(${1:list}, ${2:function})
snippet lib
	library(${1:package})
snippet mapply
	mapply(${1:function}, ${2:...})
snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})
snippet rapply
	rapply(${1:list}, ${2:function})
snippet req
	require(${1:package})
snippet ret
	return(${1:code})
snippet sapply
	sapply(${1:list}, ${2:function})
snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))
	
snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
	    standardGeneric("${1:generic}")
	})
	
snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
	    $0
	})
	
snippet shinyapp
	library(shiny)
	
	ui <- fluidPage(
	  $0
	)
	
	server <- function(input, output, session) {
	  
	}
	
	shinyApp(ui, server)
	
snippet shinymod
	${1:name}_UI <- function(id) {
	  ns <- NS(id)
	  tagList(
	    $0
	  )
	}
	
	${1:name} <- function(input, output, session) {
	  
	}
	
snippet src
	source("${1:file.R}")
snippet switch
	switch (${1:object},
	    ${2:case} = ${3:action}
	)
	
snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})
snippet ts
	# `!v strftime('%a')` `!v strftime('%b')` `!v strftime('%b')` `!v strftime('%H')`:`!v strftime('%M')`:`!v strftime('%S')` `!v strftime('%Y')` ------------------------------
	
snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})
snippet while
	while (${1:condition}) {
	    $0
	}
	

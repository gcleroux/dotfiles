# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet enc set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263.
	# -*- coding=utf-8 -*-
	$0
snippet enco Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120.
	# coding=utf-8
	$0
snippet env Adds shebang line for default python interpreter.
	#!/usr/bin/env python
	$0
snippet env3 Adds shebang line for default python 3 interpreter.
	#!/usr/bin/env python3
	$0
snippet adef Code snippet for async function definition.
	async def ${1:fname}(${2:arg}):
		${3:pass}$0
snippet classi Code snippet for a class definition.
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1.}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.arg = arg
			$0
snippet def Code snippet for function definition.
	def ${1:fname}(${2:arg}):
		${3:pass}$0
snippet deft Code snippet for function definition.
	def ${1:fname}(${2:arg}) -> ${3:return_type}:
		${4:pass}$0
snippet defs Code snippet for a class method definition.
	def ${1:mname}(self, ${2:arg}):
		${3:pass}$0
snippet defst Code snippet for a class method definition.
	def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:
		${4:pass}$0
snippet property New property: get and set via decorator
	@property
	def ${1:foo}(self):
	    """${2:The $1 property.}"""
	    ${3:return self._$1}
	@${4:$1}.setter
	def ${5:$1}(self, value):
	    ${6:self._$1} = value
snippet __ Code snippet to create magic methods.
	__${1:init}__$0
snippet class Code snippet for a class definition
	class ${1:classname}(${2:object}):
		${3:pass}
snippet elif Code snippet for an elif
	elif ${1:expression}:
		${2:pass}
snippet else Code snippet for an else
	else:
		${1:pass}
snippet for Code snippet to create a for loop structure.
	for ${1:value} in ${2:iterable}:
		${3:pass}$0
snippet for/else Code snippet for a for loop with else
	for ${1:target_list} in ${2:expression_list}:
		${3:pass}
	else:
		${4:pass}
snippet fim Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table.
	from ${1:package/module} import ${2:names}$0
snippet fenc Import future statement definitions for python2.x scripts using utf-8 as encoding.
	# -*- coding: utf-8 -*-
	from __future__ import absolute_import, division, print_function, unicode_literals
snippet fenco Import future statement definitions for python3.x scripts using utf-8 as encoding.
	# coding: utf-8
	from __future__ import absolute_import, division, print_function, unicode_literals
snippet if Code snippet for the if statement.
	if ${1:condition}:
		${2:pass}$0
snippet ifmain Create implicitly all the code at the top level using the __name__ special variable.
	if __name__ == "__main__":
		${1:main()}$0
snippet if/else Code snippet for an if statement with else
	if ${1:condition}:
		${2:pass}
	else:
		${3:pass}
snippet im Import a package or module
	import ${1:package/module}$0
snippet . Shortend snippet to reference the self property in an object.
	self.$0
snippet try Code Snippet for a try and except blocks.
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}$0
snippet trye Code Snippet for a try/except with else statement.
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5:pass}$0
snippet tryef Code Snippet for a try/except/finally with else statement.
	try:
		${1:pass}
	except${2: ${3:Exception} as ${4:e}}:
		${5:raise}
	else:
		${6:pass}
	finally:
		${7:pass}$0
snippet tryf Code Snippet for a try/except/finally.
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}$0
snippet while Code snippet to create a while loop structure.
	while ${1:condition}:
		${2:pass}$0
snippet while/else Code snippet for a while loop with else
	while ${1:expression}:
		${2:pass}
	else:
		${3:pass}
snippet with Code snippet for a with statement
	with ${1:expression} as ${2:target}:
		${3:pass}

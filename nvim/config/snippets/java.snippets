# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet dowhile Do-While Statement
	do {
		$0
	} while (${1:condition});
snippet private_field Private field
	private ${1:String} ${2:name};
snippet private_static_method private static method
	private static ${1:Type} ${2:name}($3) {
		$0
	}
snippet protected_method Protected method
	protected ${1:void} ${2:name}($3) {
		$0
	}
snippet protected_field Protected field
	protected ${1:String} ${2:name};
snippet ctor Public constructor
	public ${1:`!v expand('%:t:r')`}($2) {
		${0:super();}
	}
snippet public_field Public field
	public ${1:String} ${2:name};
snippet public_method public method
	public ${1:void} ${2:name}($3) {
		$0
	}
snippet public_static_method public static method
	public static ${1:void} ${2:name}($3) {
		$0
	}
snippet switch Switch Statement
	switch (${1:key}) {
		case ${2:value}:
			$0
			break;
	
		default:
			break;
	}
snippet while While Statement
	while (${1:condition}) {
		$0
	}
snippet class Public class
	public class `!v expand('%:t:r')` {
		$0
	}
snippet foreach Enhanced for loop
	for (${1:type} ${2:var} : ${3:iterable}) {
		$0
	}
snippet fori Indexed for loop
	for (${1:int} ${2:i} = ${3:0}; $2 < ${4:max}; $2++) {
		$0
	}
snippet if if statement
	if (${1:condition}) {
		$0
	}
snippet ifelse if/else statement
	if (${1:condition}) {
		$2
	} else {
		$0
	}
snippet ifnotnull if statement checking for not null
	if (${1:condition} != null) {
		$0
	}
snippet ifnull if statement checking for null
	if (${1:condition} == null) {
		$0
	}
snippet import Import statement
	import ${1:PackageName}
snippet main Public static main method
	public static void main(String[] args) {
		$0
	}
snippet new Create new Object
	${1:Object} ${2:foo} = new ${1:Object}();
snippet package Package statement
	package ${1:PackageName}
snippet private_method private method
	private ${1:void} ${2:name}($3) {
		$0
	}
snippet syserr Print to standard err
	System.err.println($0);
snippet sysout Print to standard out
	System.out.println($0);
snippet try_catch try/catch block
	try {
		$1
	} catch (${2:Exception} ${3:e}) {
		$4//${0:TODO}: handle exception
	}
snippet try_resources
	try ($1) {
		$2
	} catch (${3:Exception} ${4:e}) {
		$5//${0:TODO}: handle exception
	}

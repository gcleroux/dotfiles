# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet s-action action function
	function ${1:foo}(node) {
		// the node has been mounted in the DOM
		return {
			destroy() {
				// the node has been removed from the DOM
			}
		};
	}
snippet s-action-parameters action function
	function ${1:foo}(node, ${2:parameters}) {
		// the node has been mounted in the DOM
		return {
			destroy() {
				// the node has been removed from the DOM
			}
		};
	}
snippet s-action-update action w/ update function
	function ${1:foo}(node, ${2:parameters}) {
		// the node has been mounted in the DOM
		return {
			update(${2:parameters}) {
				// the value of \`${2:parameters}\` has changed
			}
			destroy() {
				// the node has been removed from the DOM
			}
		};
	}
snippet s-lifecycle-after-update afterUpdate lifecycle function
	afterUpdate(() => {
		${1:// content here}
	});
snippet s-animate animate
	animate:${1:name}={${2:params}}
snippet s-await-short-block await short block
	{#await ${1:promise} then ${2:value}}
		<!-- promise was fulfilled -->
	{/await}
snippet s-await-then-block await then block
	{#await ${1:promise}}
		<!-- promise is pending -->
	{:then ${2:value}}
		<!-- promise was fulfilled -->
	{/await}
snippet s-lifecycle-before-update beforeUpdate lifecycle function
	beforeUpdate(() => {
		${1:// content here}
	});
snippet s-bind bind property
	bind:${1:property}
snippet s-bind-audio bind property
	<audio
	src={${1:clip}}
	bind:${2:duration}
	bind:${3:buffered}
	bind:${4:played}
	bind:${5:seekable}
	bind:${6:seeking}
	bind:${7:ended}
	bind:${8:currentTime}
	bind:${9:playbackRate}
	bind:${10:paused}
	bind:${11:volume}
	bind:${12:muted}
	></audio>
snippet s-bind-block-level bind property
	bind:${1|clientWidth,clientHeight,offsetWidth,offsetHeight|}={${2:variable}}
snippet s-bind-group bind group
	bind:group={${1:variable}}
snippet s-bind-media-elements bind property
	bind:${1|duration,buffered,played,seekable,seeking,ended,currentTime,playbackRate,paused,volume,muted,videoWidth,videoHeight|}
snippet s-bind-property bind property
	bind:${1:property}={${2:variable}}
snippet s-bind-this bind this
	bind:this={${1:dom_node}}
snippet s-bind-video bind property
	<video
	src={${1:clip}}
	bind:${2:duration}
	bind:${3:buffered}
	bind:${4:played}
	bind:${5:seekable}
	bind:${6:seeking}
	bind:${7:ended}
	bind:${8:currentTime}
	bind:${9:playbackRate}
	bind:${10:paused}
	bind:${11:volume}
	bind:${12:muted}
	bind:${13:videoWidth}
	bind:${14:videoHeight}
	></video>
snippet s-body svelte:body
	<svelte:body />
snippet s-catch-block catch block
	{:catch error}
		<!-- promise was rejected -->
snippet s-class class
	class:${1:name}={${2:condition}}
snippet s-class-short class shorthand
	class:${1:name}}
snippet s-component svelte:component
	<svelte:component this={${1:component}} />
snippet s-component-format add a script to your svelte file
	<script>
		${1:// your script goes here}
	</script>
	
	<style>
		${2:/* your styles go here */}
	</style>
	
	${3:<!-- markup (zero or more items) goes here -->}
snippet s-create-component svelte create component
	const component = new ${1:App}({
		target: ${2|target,document.body|},
		props: ${3:props},
		anchor: ${4:anchor},
		hydrate: ${5|false,true|},
		intro: ${5|false,true|}
	})
snippet s-derived svelte derived store
	const ${1:derivedStore} = derived(${2:storeA}, \$${2:storeA} => \$${2:storeA} * 2);
snippet s-derived-multiple svelte derived store
	const ${1:derivedStore} = derived([${2:storeA}, ${3:storeB}], ([\$${2:storeA}, \$${3:storeB}]) => \$${2:storeA} + \$${3:storeB});
snippet s-derived-multiple-set svelte derived store
	const ${1:derivedStore} = derived([${2:storeA}, ${3:storeB}], ([\$${2:storeA}, \$${3:storeB}], set) => {
		setTimeout(() => set(\$${2:storeA} + \$${3:storeB}), 1000);
	}, 'one moment...');
snippet s-derived-set svelte derived store
	const ${1:derivedStore} = derived(${2:storeA}, (\$${2:storeA}, set) => {
		setTimeout(() => set(\$${2:storeA}), 1000);
	}, 'one moment...');
snippet s-dispatch svelte dispatch
	const dispatch = createEventDispatcher();
snippet s-dispatch-event svelte dispatch event
	dispatch(${1:key},${2:data})
snippet s-each-block each block
	{#each ${1:items} as ${2:item}}
		${3: <!-- content here -->}
	{/each}
snippet s-each-else-block each else block
	{#each ${1:items} as ${2:item}}
		${3: <!-- content here -->}
	{:else}
		${4: <!-- empty list -->}
	{/each}
snippet s-each-index-block each index block
	{#each ${1:items} as ${2:item},${3:i}}
		${4: <!-- content here -->}
	{/each}
snippet s-each-index-key-block each index key block
	{#each ${1:items} as ${2:item},i (${3:key})}
		${4: <!-- content here -->}
	{/each}
snippet s-each-key-block each index block
	{#each ${1:items} as ${2:item},(${3:key})}
		${4: <!-- content here -->}
	{/each}
snippet s-else-block else block
	{:else}
		${1: <!-- else content here -->}
snippet s-else-if-block else if block
	{:else if ${1: otherCondition}}
		${2: <!-- else if content here -->}
snippet s-expression basic expression
	{${1:expression}}
snippet s-expression-debug html content expression
	{@debug ${1:var1}${2:,var2}}
snippet s-expression-html html content expression
	{@html ${1:expression}}
snippet s-get-content svelte getContext
	getContext(${1:key})
snippet s-head svelte:head
	<svelte:head>
		${1:<!-- head content -->}
	</svelte:head>
snippet s-if-block if block
	{#if ${1:condition}}
		${2: <!-- content here -->}
	{/if}
snippet s-if-else-block if else block
	{#if ${1:condition}}
		${2: <!-- content here -->}
	{:else}
		${3: <!-- else content here -->}
	{/if}
snippet s-if-else-if-block if else if block
	{#if ${1:condition}}
		${2: <!-- content here -->}
	{:else if ${3: otherCondition}}
		${4: <!-- else if content here -->}
	{:else}
		${5: <!-- else content here -->}
	{/if}
snippet s-modifier modifier
	|${1|preventDefault,stopPropagation,passive,capture,once|}
snippet s-lifecycle-destroy onDestroy lifecycle function
	onDestroy(() => {
		${1:// content here}
	});
snippet s-on-event on event
	on:${1:eventname}={${2:handler}}
snippet s-on-event-foward on event foward
	on:${1:eventname}
snippet s-on-event-inline on event inline
	on:${1:click}="{() => ${2:count += 1}}"
snippet s-on-event-modifiers on event w/ modifiers
	on:${1:eventname}|${2|preventDefault,stopPropagation,passive,capture,once|}={${3:handler}}
snippet s-lifecycle-mount onMount lifecycle function
	onMount(() => {
		${1:// content here}
	});
snippet s-options svelte:options
	<svelte:options ${1|immutable,accessors,namespace,tag|}={${2:value}}/>
snippet s-reactive-block reactive block
	\$: { ${1:console.log(${2:prop});}}
snippet s-reactive-statement reactive statement
	\$: ${1:variable} = ${2:prop}
snippet s-readable svelte readable (set function required)
	const ${1:store} = readable(${2:initialValue}, () => {
		${3:console.log('got a subscriber');}
		return () => ${4:console.log('no more subscribers');}
	});
snippet s-register svelte register
	require('svelte/register');
	const ${1:App} = require('${2:./App.svelte}').default;
snippet s-render-component svelte render component
	const { head, html, css } = ${1:App}.render({
		props: ${3:props},
	})
snippet s-script-context add a script with context="module" to your svelte file
	<script context="module">
		${1:// your script goes here}
	</script>
snippet s-script add a script to your svelte file
	<script>
		${1:// your script goes here}
	</script>
snippet s-self svelte:self
	<svelte:self />
snippet s-self-prop svelte:self
	<svelte:self ${1:prop}={${2:value}} />
snippet s-set-content svelte setContext
	setContext(${1:key}, ${2:context})
snippet s-slot slot
	<slot>${1:<!-- optional fallback -->}</slot>
snippet s-slot-name slot w/ name
	<slot name="${1:x}">${2:<!-- optional fallback -->}</slot>
snippet s-slot-prop slot w/ prop
	<slot ${1:prop}={${2:value}}>${3:<!-- optional fallback -->}</slot>
snippet s-spring svelte create spring store
	const ${1:store} = spring(${2:value}, ${3:options});
snippet s-store-get-value svelte get value from store
	const ${1:value} = get(${2:store});
snippet s-style add styles to your svelte file
	<style>
		${1:/* your styles go here */}
	</style>
snippet s-then-block then block
	{:then ${1:value}}
		<!-- promise was fulfilled -->
snippet s-tick svelte tick function
	await tick()
snippet s-transition transition
	${1|transition,in,out|}:${2:name}
snippet s-transition-all transition
	${1|transition,in,out|}:${2:name}|${3:local}={${4:params}}
snippet s-transition-events transition-events
	on:${1|introstart,introend,outrostart,outroend|}="{() => status = '${1|introstart,introend,outrostart,outroend|}'}"
snippet s-transition-local transition local
	${1|transition,in,out|}:${2:name}|${3:local}
snippet s-transition-params transition-params
	${1|transition,in,out|}:${2:name}={${3:params}}
snippet s-tweened svelte create tweened store
	const ${1:store} = tweened(${2:value}, ${3:options});
snippet s-use use action
	use:action
snippet s-use-parameters use action w/ parameters
	use:action={${1:parameters}}
snippet s-window svelte:window
	<svelte:window />
snippet s-window-bind svelte:window bind properties
	bind:${1|innerWidth,innerHeight,outerWidth,outerHeight,scrollX,scrollY,online|}={${2:variable}}
snippet s-writeable svelte writeable
	const ${1:store} = writable(${2:initialValue});
snippet s-writeable-set svelte writeable w/ set function
	const ${1:store} = writable(${2:initialValue}, () => {
		${3:console.log('got a subscriber');}
		return () => ${4:console.log('no more subscribers');}
	});

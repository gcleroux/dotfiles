# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet bf Snippet for Benchmark function
	func Benchmark$1(b *testing.B) {
		for ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {
			$0
		}
	}
snippet cs Snippet for case clause
	case ${1:condition}:$0
snippet ch Snippet for a channel
	chan ${1:type}
snippet df Snippet for defer statement
	defer ${1:func}($0)
snippet el Snippet for else branch
	else {
		$0
	}
snippet in Snippet for empty interface
	interface{}
snippet ef Snippet for Example function
	func Example$1() {
		$2
		//Output:
		$3
	}
snippet ff Snippet for fmt.Printf()
	fmt.Printf("$1", ${2:var})
snippet fp Snippet for fmt.Println()
	fmt.Println("$1")
snippet fori Snippet for a for loop
	for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {
		$0
	}
snippet forr Snippet for a for range loop
	for ${1:_, }${2:v} := range ${3:v} {
		$0
	}
snippet for Snippet for a pure for loop
	for $1{
		$0
	}
snippet func Snippet for function declaration
	func $1($2) $3 {
		$0
	}
snippet go Snippet for anonymous goroutine declaration
	go func($1) {
		$0
	}($2)
snippet gf Snippet for goroutine declaration
	go ${1:func}($0)
snippet helloweb Snippet for sample hello world webapp
	package main
	
	import (
		"fmt"
		"net/http"
		"time"
	)
	
	func greet(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello World! %s", time.Now())
	}
	
	func main() {
		http.HandleFunc("/", greet)
		http.ListenAndServe(":8080", nil)
	}
snippet wr Snippet for http Response
	${1:w} http.ResponseWriter, ${2:r} *http.Request
snippet hand Snippet for http handler declaration
	func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
		$0
	}
snippet herr Snippet for http.Error()
	http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})
snippet hf Snippet for http.HandleFunc()
	${1:http}.HandleFunc("${2:/}", ${3:handler})
snippet las Snippet for http.ListenAndServe
	http.ListenAndServe("${1::8080}", ${2:nil})
snippet rd Snippet for http.Redirect()
	http.Redirect(${1:w}, ${2:r}, "${3:/}", ${4:http.StatusFound})
snippet sv Snippet for http.Serve
	http.Serve("${1::8080}", ${2:nil})
snippet ife Snippet for if else
	if ${1:condition} {
		$2
	} else {
		$0
	}
snippet ir Snippet for if err != nil
	if err != nil {
		${1:return ${2:nil, }${3:err}}
	}
snippet om
	if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {
		$4
	}
snippet if Snippet for if statement
	if ${1:condition} {
		$0
	}
snippet finit Snippet for init function
	func init() {
		$1
	}
snippet json Snippet for struct json tag
	\`json:"$1"\`
snippet lv Snippet for log.Printf() with variable content
	log.Printf("${1:var}: %#+v\\\\n", ${1:var})
snippet lf Snippet for log.Printf()
	log.Printf("$1", ${2:var})
snippet lp Snippet for log.Println()
	log.Println("$1")
snippet fmain Snippet for main function
	func main() {
		$1
	}
snippet make Snippet for make statement
	make(${1:type}, ${2:0})
snippet map Snippet for a map
	map[${1:type}]${2:type}
snippet meth Snippet for method declaration
	func (${1:receiver} ${2:type}) ${3:method}($4) $5 {
		$0
	}
snippet fum Snippet for method declaration
	func (${1:receiver} ${2:type}) ${3:method}($4) $5 {
		$0
	}
snippet cos Snippet for a constant block
	const (
		${1:name} = ${2:value}
	)
snippet ims Snippet for a import block
	import (
		"${1:package}"
	)
snippet new Snippet for new statement
	new(${1:type})
snippet pkgm Snippet for main package & function
	package main
	
	func main() {
		$0
	}
snippet pn Snippet for panic
	panic("$0")
snippet sel Snippet for select statement
	select {
	case ${1:condition}:
		$0
	}
snippet co Snippet for a constant
	const ${1:name} = ${2:value}
snippet im Snippet for import statement
	import "${1:package}"
snippet sort Snippet for a custom sort.Sort interface implementation, for a given slice type.
	type ${1:SortBy} []${2:Type}
	
	func (a $1) Len() int           { return len(a) }
	func (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
	func (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }
snippet switch Snippet for switch statement
	switch ${1:expression} {
	case ${2:condition}:
		$0
	}
snippet tl Snippet for t.Log()
	t.Log("$1")
snippet tlf Snippet for t.Logf()
	t.Logf("$1", ${2:var})
snippet tlv Snippet for t.Logf() with variable content
	t.Logf("${1:var}: %#+v\\\\n", ${1:var})
snippet tdt Snippet for table driven test
	func Test$1(t *testing.T) {
		testCases := []struct {
			desc	string
			$2
		}{
			{
				desc: "$3",
				$4
			},
		}
		for _, tC := range testCases {
			t.Run(tC.desc, func(t *testing.T) {
				$0
			})
		}
	}
snippet tf Snippet for Test function
	func Test$1(t *testing.T) {
		$0
	}
snippet tm Snippet for TestMain function
	func TestMain(m *testing.M) {
		$1
	
		os.Exit(m.Run())
	}
snippet tyf Snippet for a type function declaration
	type ${1:name} func($3) $4
snippet tyi Snippet for a type interface
	type ${1:name} interface {
		$0
	}
snippet tys Snippet for a struct declaration
	type ${1:name} struct {
		$0
	}
snippet var Snippet for a variable
	var ${1:name} ${2:type}
snippet vars Snippet for a variable
	var (
		${1:name} ${2:type} = ${3:value}
	)

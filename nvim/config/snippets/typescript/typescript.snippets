# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet class Class Definition
	class ${1:name} {
		constructor(${2:parameters}) {
			$0
		}
	}
snippet ctor Constructor
	/**
	 *
	 */
	constructor() {
		super();
		$0
	}
snippet prop Define a full property
	
	private _${1:value} : ${2:string};
	public get ${1:value}() : ${2:string} {
		return this._${1:value};
	}
	public set ${1:value}(v : ${2:string}) {
		this._${1:value} = v;
	}
	
snippet dowhile Do-While Statement
	do {
		$0
	} while (${1:condition});
snippet for For Loop
	for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {
		const ${3:element} = ${2:array}[${1:index}];
		$0
	}
snippet foreach => For-Each Loop using =>
	${1:array}.forEach(${2:element} => {
		$0
	});
snippet forin For-In Loop
	for (const ${1:key} in ${2:object}) {
		if (${2:object}.hasOwnProperty(${1:key})) {
			const ${3:element} = ${2:object}[${1:key}];
			$0
		}
	}
snippet forof For-Of Loop
	for (const ${1:iterator} of ${2:object}) {
		$0
	}
snippet function Function Statement
	function ${1:name}(${2:params}:${3:type}) {
		$0
	}
snippet if If Statement
	if (${1:condition}) {
		$0
	}
snippet ifelse If-Else Statement
	if (${1:condition}) {
		$0
	} else {
		
	}
snippet import statement Import external module.
	import { $0 } from "${1:module}";
snippet iface Interface Definition
	interface ${1:name} {
		$0
	}
snippet error Log error to the console
	console.error($1);
	$0
snippet log Log to the console
	console.log($1);
	$0
snippet warn Log warning to the console
	console.warn($1);
	$0
snippet new New Statement
	const ${1:name} = new ${2:type}(${3:arguments});$0
snippet private method Private Method Definition
	private ${1:name}() {
		$0
	}
snippet get Property getter
	
	public get ${1:value}() : ${2:string} {
		${3:return $0}
	}
	
snippet set Property setter
	
	public set ${1:value}(v : ${2:string}) {
		this.$3 = v;
	}
	
snippet public method Public Method Definition
	/**
	 * ${1:name}
	 */
	public ${1:name}() {
		$0
	}
snippet #endregion Folding Region End
	//#endregion
snippet #region Folding Region Start
	//#region $0
snippet settimeout Set Timeout Function
	setTimeout(() => {
		$0
	}, ${1:timeout});
snippet switch Switch Statement
	switch (${1:key}) {
		case ${2:value}:
			$0
			break;
	
		default:
			break;
	}
snippet throw Throw Exception
	throw "$1";
	$0
snippet ref Triple-slash reference
	/// <reference path="$1" />
	$0
snippet trycatch Try-Catch Statement
	try {
		$0
	} catch (${1:error}) {
		
	}
snippet while While Statement
	while (${1:condition}) {
		$0
	}

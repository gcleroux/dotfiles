# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet anfn Creates an anonymous function
	(${1:first}) => { ${2:second} }
snippet bnd Binds this to a method
	this.${1:first} = this.${1:first}.bind(this)
snippet rconst Adds a default constructor for it('', () => {})the class that contains props as arguments
	constructor(props) {
	  super(props)
	
	  this.state = {
	     ${1:first}
	  }
	}
snippet cmmb
	/**
	 * ${1:first}
	 */
snippet cdm Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.
	componentDidMount() { ${1:first} }
snippet cdup Invoked immediately after the component's updates are flushed to the DOM.
	componentDidUpdate(prevProps, prevState) { ${1:first}} 
snippet props Access component's props
	this.props.${1:first}
snippet ssf Performs a shallow merge of nextState into current state
	this.setState((state, props) => { return { ${1:first} }})
snippet sst Performs a shallow merge of nextState into current state
	this.setState({${1:first}})
snippet state
	this.state.${1:first}
snippet cwun Invoked immediately before a component is unmounted from the DOM.
	componentWillUnmount() {${1:first} }
snippet cas If the specified expression is false, the message is written to the console along with a stack trace
	console.assert(${1:first}, ${2:second})
snippet ccl Clears the console
	console.clear()
snippet cco Writes the the number of times that count() has been invoked at the same line and with the same label
	console.count(${1:first})
snippet cdi Prints a JavaScript representation of the specified object
	console.dir(${1:first})
snippet cer Displays a message in the console and also includes a stack trace from where the method was called
	console.error(${1:first})
snippet cgr Groups and indents all following output by an additional level, until console.groupEnd() is called.
	console.group('${1:first}')
snippet cge Closes out the corresponding console.group().
	console.groupEnd()
snippet cin Displays a message in the console but also displays a blue information icon along with the logged message
	console.info(${1:first})
snippet clg Displays a message in the console
	console.log(${1:first})
snippet clj Logs stringified JSON property with name.
	console.log('${1:first}', JSON.stringify(${1:first}, null, 2))
snippet clo Logs property with name.
	console.log('${1:first}', ${1:first})
snippet ctl Logs table to console
	console.table([${1:first}])
snippet ctm Console time wrapper
	console.time('${1:first}')
snippet cte Console time end wrapper
	console.timeEnd('${1:first}')
snippet ctr Prints a stack trace from the point where the method was called
	console.trace(${1:first})
snippet cwa Displays a message in the console but also displays a yellow warning icon along with the logged message
	console.warn(${1:first})
snippet rcontext Create React context
	const ${1:first} = React.createContext()
snippet cref Create ref statement used inside constructor
	this.${1:first}Ref = React.createRef()
snippet desc Testing `describe` block
	describe('${1:first}', () => { ${2:second} })
snippet cp Creates and assigns a local variable using props destructing
	const { ${1:first} } = this.props
snippet cs Creates and assigns a local variable using state destructing
	const { ${1:first} } = this.state
snippet dar Creates and assigns a local variable using array destructing
	const [${2:second}] = ${1:first}
snippet dob Creates and assigns a local variable using object destructing
	const {${2:second}} = ${1:first}
snippet est Creates empty state object. To be used in a constructor.
	state = { ${1:first} }
snippet exa
	export { ${2:second} as ${3:third} } from '${1:first}'
snippet exp
	export default ${1:first}
snippet edf Export default function
	export default (${1:first}) => {${2:second}}
snippet ednf Export default named function
	export default function ${1:first}(${2:second}) {${3:third}}
snippet exd
	export { ${2:second} } from '${1:first}'
snippet expint
	export interface ${1:first} {${2:second}}
snippet enf Export named function
	export const ${1:first} = (${2:second}) => {${3:third}}
snippet exptp
	export type ${1:first} = {${2:second}}
snippet fre Creates a forEach statement
	${1:first}.forEach(${2:second} => {${3:third}})
snippet fin Iterating over property values of iterable objects
	for(let ${1:first} in ${2:second}) {${3:third}}
snippet fof Iterating over property names of iterable objects
	for(let ${1:first} of ${2:second}) {${3:third}}
snippet gdsfp Invoked right before calling the render method, both on the initial mount and on subsequent updates.
	static getDerivedStateFromProps(props, state) {${1:first}}
snippet gsbu Called right before mutations are made (e.g. before the DOM is updated)
	getSnapshotBeforeUpdate = (prevProps, prevState) => {${1:first}}
snippet hoc
	import React from 'react'
	import PropTypes from 'prop-types'
	
	export default (WrappedComponent) => {
	  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />
	
	  hocComponent.propTypes = {}
	
	  return hocComponent
	}
	
snippet hocredux
	import React from 'react'
	import { connect } from 'react-redux'
	import PropTypes from 'prop-types'
	
	export const mapStateToProps = state => ({})
	
	export const mapDispatchToProps = {}
	
	export const ${1:first} = (WrappedComponent) => {
	  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />
	
	  hocComponent.propTypes = {}
	
	  return hocComponent
	}
	
	export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:first}(WrapperComponent))
	
snippet imp
	import ${2:second} from '${1:first}'
snippet ima
	import { ${2:second} as ${3:third} } from '${1:first}'
snippet imbr
	import { BrowserRouter as Router } from 'react-router-dom'
snippet imrr
	import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'
	
snippet imd
	import { ${2:second} } from '${1:first}'
snippet ime
	import * as ${2:second} from '${1:first}'
snippet imn
	import '${1:first}'
snippet impt
	import PropTypes from 'prop-types'
snippet imr
	import React from 'react'
snippet imrd
	import ReactDOM from 'react-dom'
snippet imrc
	import React, { Component } from 'react'
snippet imrcp
	import React, { Component } from 'react'
	import PropTypes from 'prop-types'
	
snippet imrm
	import React, { memo } from 'react'
snippet imrmp
	import React, { memo } from 'react'
	import PropTypes from 'prop-types'
	
snippet imrpc
	import React, { PureComponent } from 'react'
snippet imrpcp
	import React, { PureComponent } from 'react'
	import PropTypes from 'prop-types'
	
snippet redux
	import { connect } from 'react-redux'
snippet imbrl
	import { Link } from 'react-router-dom'
snippet imbrnl
	import { NavLink } from 'react-router-dom'
snippet imbrc
	import { Route, Switch, NavLink, Link } from 'react-router-dom'
snippet imbrs
	import { Switch } from 'react-router-dom'
snippet tita Testing asynchronous `it` block
	it('should ${1:first}', async () => { ${2:second} })
snippet tit Testing `it` block
	it('should ${1:first}', () => { ${2:second} })
snippet reduxmap
	const mapStateToProps = (state) => ({})
	
	const mapDispatchToProps = {}
snippet met Creates a method inside a class
	${1:first} = (${2:second}) => {${3:third}}
snippet nfn Creates a named function
	const ${1:first} = (${2:second}) => { ${3:third} }
snippet prom Creates and returns a new Promise in the standard ES7 syntax
	return new Promise((resolve, reject) => { ${1:first} })
snippet ptany Any prop type
	PropTypes.any
snippet pta Array prop type
	PropTypes.array
snippet ptao An array of a certain type
	PropTypes.arrayOf($0)
snippet ptaor An array of a certain type required
	PropTypes.arrayOf($0).isRequired
snippet ptar Array prop type required
	PropTypes.array.isRequired
snippet ptb Bool prop type
	PropTypes.bool
snippet ptbr Bool prop type required
	PropTypes.bool.isRequired
snippet ptel React element prop type
	PropTypes.element
snippet ptelr React element prop type required
	PropTypes.element.isRequired
snippet pte Prop type limited to specific values by treating it as an enum
	PropTypes.oneOf(['$0'])
snippet pter Prop type limited to specific values by treating it as an enum required
	PropTypes.oneOf(['$0']).isRequired
snippet ptex An object with warnings on extra properties
	PropTypes.exact({
	  $0
	})
snippet ptexr An object with warnings on extra properties required
	PropTypes.exact({
	  $0
	}).isRequired
snippet ptf Func prop type
	PropTypes.func
snippet ptfr Func prop type required
	PropTypes.func.isRequired
snippet pti Is an instance of a class prop type
	PropTypes.instanceOf($0)
snippet ptir Is an instance of a class prop type required
	PropTypes.instanceOf($0).isRequired
snippet ptnd Anything that can be rendered: numbers, strings, elements or an array
	PropTypes.node
snippet ptndr Anything that can be rendered: numbers, strings, elements or an array required
	PropTypes.node.isRequired
snippet ptn Number prop type
	PropTypes.number
snippet ptnr Number prop type required
	PropTypes.number.isRequired
snippet pto Object prop type
	PropTypes.object
snippet ptoo An object with property values of a certain type
	PropTypes.objectOf($0)
snippet ptoor An object with property values of a certain type required
	PropTypes.objectOf($0).isRequired
snippet ptor Object prop type required
	PropTypes.object.isRequired
snippet ptet An object that could be one of many types
	PropTypes.oneOfType([
	  $0
	])
snippet ptetr An object that could be one of many types required
	PropTypes.oneOfType([
	  $0
	]).isRequired
snippet ptsh An object taking on a particular shape
	PropTypes.shape({
	  $0
	})
snippet ptshr An object taking on a particular shape required
	PropTypes.shape({
	  $0
	}).isRequired
snippet pts String prop type
	PropTypes.string
snippet ptsr String prop type required
	PropTypes.string.isRequired
snippet pge Creates a getter property inside a class
	get ${1:first}() {
	  return this.${2:second}
	}
snippet pse Creates a setter property inside a class
	set ${1:first}(${2:second}) {${3:third}}
snippet rafc Creates a React Arrow Function Component with ES7 module system
	import React from 'react'
	
	export const ${1:`!v expand('%:t:r')`} = () => {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
snippet rafcp Creates a React Arrow Function Component with ES7 module system with PropTypes
	import React from 'react'
	import PropTypes from 'prop-types'
	
	const ${1:`!v expand('%:t:r')`} = props => {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	${1:`!v expand('%:t:r')`}.propTypes = {}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rafce Creates a React Arrow Function Component with ES7 module system
	import React from 'react'
	
	const ${1:`!v expand('%:t:r')`} = () => {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rcc Creates a React component class with ES7 module system
	import React, { Component } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends Component {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
snippet rccp Creates a React component class with PropTypes and ES7 module system
	import PropTypes from 'prop-types'
	import React, { Component } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends Component {
	  static propTypes = {${2:second}: ${3:third}}
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
snippet rcredux Creates a React component class with connected redux and ES7 module system
	import React, { Component } from 'react'
	import { connect } from 'react-redux'
	
	export class ${1:`!v expand('%:t:r')`} extends Component {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	const mapStateToProps = (state) => ({})
	
	const mapDispatchToProps = {}
	
	export default connect(mapStateToProps, mapDispatchToProps)(${1:`!v expand('%:t:r')`})
snippet rcreduxp Creates a React component class with PropTypes with connected redux and ES7 module system
	import PropTypes from 'prop-types'
	import React, { Component } from 'react'
	import { connect } from 'react-redux'
	
	export class ${1:`!v expand('%:t:r')`} extends Component {
	  static propTypes = {
	    ${2:second}: ${3:third}
	  }
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	const mapStateToProps = (state) => ({})
	
	const mapDispatchToProps = {}
	
	export default connect(mapStateToProps, mapDispatchToProps)(${1:`!v expand('%:t:r')`})
snippet rce Creates a React component class with ES7 module system
	import React, { Component } from 'react'
	
	export class ${1:`!v expand('%:t:r')`} extends Component {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rcep Creates a React component class with ES7 module system
	import PropTypes from 'prop-types'
	import React, { Component } from 'react'
	
	export class ${1:`!v expand('%:t:r')`} extends Component {
	  static propTypes = {}
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rpce Creates a React pure component class with ES7 module system export
	import React, { PureComponent } from 'react'
	
	export class ${1:`!v expand('%:t:r')`} extends PureComponent {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rpc Creates a React pure component class with ES7 module system
	import React, { PureComponent } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends PureComponent {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
snippet rpcp Creates a React component class with ES7 module system
	import PropTypes from 'prop-types'
	import React, { PureComponent } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends PureComponent {
	  static propTypes = {}
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
snippet rmc Creates a React Memo Function Component with ES7 module system
	import React, { memo } from 'react'
	
	const ${1:`!v expand('%:t:r')`} = memo(() => {
	  return (
	    <div>${1:first}</div>
	  )
	})
	
	export default ${1:`!v expand('%:t:r')`}
snippet rmcp Creates a React Memo Function Component with ES7 module system with PropTypes
	import PropTypes from 'prop-types'
	import React, { memo } from 'react'
	
	const ${1:`!v expand('%:t:r')`} = memo((props) => {
	  return (
	    <div>${1:first}</div>
	  )
	})
	
	${1:`!v expand('%:t:r')`}.propTypes = {}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rfc Creates a React Functional Component with ES7 module system
	import React from 'react'
	
	export default function ${1:`!v expand('%:t:r')`}() {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
snippet rfcredux Creates a React functional component with connected redux and ES7 module system
	import React from 'react'
	import { connect } from 'react-redux'
	
	export const ${1:`!v expand('%:t:r')`} = (props) => {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	const mapStateToProps = (state) => ({})
	
	const mapDispatchToProps = {}
	
	export default connect(mapStateToProps, mapDispatchToProps)(${1:`!v expand('%:t:r')`})
snippet rfcreduxp DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system
	import PropTypes from 'prop-types'
	import React from 'react'
	import { connect } from 'react-redux'
	
	export const ${1:`!v expand('%:t:r')`} = (props) => {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	${1:`!v expand('%:t:r')`}.propTypes = {
	  ${2:second}: PropTypes.${3:third}
	}
	
	const mapStateToProps = (state) => ({})
	
	const mapDispatchToProps = {}
	
	export default connect(mapStateToProps, mapDispatchToProps)(${1:`!v expand('%:t:r')`})
snippet rfcp Creates a React Functional Component with ES7 module system with PropTypes
	import React from 'react'
	import PropTypes from 'prop-types'
	
	function ${1:`!v expand('%:t:r')`}(props) {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	${1:`!v expand('%:t:r')`}.propTypes = {}
	
	export default ${1:`!v expand('%:t:r')`}
	
snippet rfce Creates a React Functional Component with ES7 module system
	import React from 'react'
	
	function ${1:`!v expand('%:t:r')`}() {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rnc
	import { Text, View } from 'react-native'
	import React, { Component } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends Component {
	  render() {
	    return (
	      <View>
	        <Text>${1:first}</Text>
	      </View>
	    )
	  }
	}
snippet rnce
	import { Text, View } from 'react-native'
	import React, { Component } from 'react'
	
	export class ${1:`!v expand('%:t:r')`} extends Component {
	  render() {
	    return (
	      <View>
	        <Text>${1:first}</Text>
	      </View>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rncs
	import { Text, StyleSheet, View } from 'react-native'
	import React, { Component } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends Component {
	  render() {
	    return (
	      <View>
	        <Text>${1:first}</Text>
	      </View>
	    )
	  }
	}
	
	const styles = StyleSheet.create({})
snippet rnf
	import { View, Text } from 'react-native'
	import React from 'react'
	
	export default function ${1:`!v expand('%:t:r')`}() {
	  return (
	    <View>
	      <Text>${1:first}</Text>
	    </View>
	  )
	}
snippet rnfs
	import { StyleSheet, Text, View } from 'react-native'
	import React from 'react'
	
	export default function ${1:`!v expand('%:t:r')`}() {
	  return (
	    <View>
	      <Text>${1:first}</Text>
	    </View>
	  )
	}
	
	const styles = StyleSheet.create({})
snippet rnfe
	import { View, Text } from 'react-native'
	import React from 'react'
	
	const ${1:`!v expand('%:t:r')`} = () => {
	  return (
	    <View>
	      <Text>${1:first}</Text>
	    </View>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rnfes
	import { StyleSheet, Text, View } from 'react-native'
	import React from 'react'
	
	const ${1:`!v expand('%:t:r')`} = () => {
	  return (
	    <View>
	      <Text>${1:first}</Text>
	    </View>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
	
	const styles = StyleSheet.create({})
snippet imrn
	import { ${1:first} } from 'react-native'
snippet rnpc
	import { Text, View } from 'react-native'
	import React, { PureComponent } from 'react'
	
	export default class ${1:`!v expand('%:t:r')`} extends PureComponent {
	  render() {
	    return (
	      <View>
	        <Text>${1:first}</Text>
	      </View>
	    )
	  }
	}
snippet rnpce
	import { Text, View } from 'react-native'
	import React, { PureComponent } from 'react'
	
	export class ${1:`!v expand('%:t:r')`} extends PureComponent {
	  render() {
	    return (
	      <View>
	        <Text>${1:first}</Text>
	      </View>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet rnstyle
	const styles = StyleSheet.create({${1:first}})
snippet rxaction
	export const ${1:first} = (payload) => ({
	  type: ${2:second},
	  payload
	})
	
snippet rxconst
	export const ${1:first} = '${1:first}'
snippet rxreducer
	const initialState = {}
	
	export default (state = initialState, { type, payload }) => {
	  switch (type) {
	
	  case ${1:first}:
	    return { ...state, ...payload }
	
	  default:
	    return state
	  }
	}
	
snippet rxselect
	import { createSelector } from 'reselect'
	
	export const ${1:first} = state => state.${2:second}
snippet rxslice
	import { createSlice } from '@reduxjs/toolkit'
	
	const initialState = {
	
	}
	
	const ${1:`!v expand('%:t:r')`} = createSlice({
	  name: ${2:second},
	  initialState,
	  reducers: {}
	});
	
	export const {} = ${1:`!v expand('%:t:r')`}.actions
	
	export default ${1:`!v expand('%:t:r')`}.reducer
snippet sti Executes the given function at specified intervals
	setInterval(() => { ${1:first} }, ${2:second})
snippet sto Executes the given function after the specified delay
	setTimeout(() => { ${1:first} }, ${2:second})
snippet srtest Create test component
	import React from 'react'
	import renderer from 'react-test-renderer'
	import { Provider } from 'react-redux'
	
	import store from '~/store'
	import { ${1:`!v expand('%:t:r')`} } from '../${1:`!v expand('%:t:r')`}'
	
	describe('<${1:`!v expand('%:t:r')`} />', () => {
	  const defaultProps = {}
	  const wrapper = renderer.create(
	    <Provider store={store}>
	     <${1:`!v expand('%:t:r')`} {...defaultProps} />
	    </Provider>,
	  )
	
	  test('render', () => {
	    expect(wrapper).toMatchSnapshot()
	  })
	})
snippet sntest
	import 'react-native'
	import React from 'react'
	import renderer from 'react-test-renderer'
	
	import ${1:`!v expand('%:t:r')`} from '../${1:`!v expand('%:t:r')`}'
	
	describe('<${1:`!v expand('%:t:r')`} />', () => {
	  const defaultProps = {}
	  const wrapper = renderer.create(<${1:`!v expand('%:t:r')`} {...defaultProps} />)
	
	  test('render', () => {
	    expect(wrapper).toMatchSnapshot()
	  })
	})
snippet snrtest
	import 'react-native'
	import React from 'react'
	import renderer from 'react-test-renderer'
	import { Provider } from 'react-redux'
	
	import store from '~/store'
	import ${1:`!v expand('%:t:r')`} from '../${1:`!v expand('%:t:r')`}'
	
	describe('<${1:`!v expand('%:t:r')`} />', () => {
	  const defaultProps = {}
	  const wrapper = renderer.create(
	    <Provider store={store}>
	      <${1:`!v expand('%:t:r')`} {...defaultProps} />
	    </Provider>,
	  )
	
	  test('render', () => {
	    expect(wrapper).toMatchSnapshot()
	  })
	})
snippet stest
	import React from 'react'
	import renderer from 'react-test-renderer'
	
	import { ${1:`!v expand('%:t:r')`} } from '../${1:`!v expand('%:t:r')`}'
	
	describe('<${1:`!v expand('%:t:r')`} />', () => {
	  const defaultProps = {}
	  const wrapper = renderer.create(<${1:`!v expand('%:t:r')`} {...defaultProps} />)
	
	  test('render', () => {
	    expect(wrapper).toMatchSnapshot()
	  })
	})
snippet scu Invoked before rendering when new props or state are being received.
	shouldComponentUpdate(nextProps, nextState) { ${1:first} }
snippet testa Testing `asynchronous test` block
	test('should ${1:first}', async () => { ${2:second} })
snippet test Testing `test` block
	test('should ${1:first}', () => { ${2:second} })
snippet tpf
	typeof ${1:first}
snippet tsrafc Creates a React Arrow Function Component with ES7 module system and TypeScript interface
	import React from 'react'
	
	type Props = {}
	
	const ${1:`!v expand('%:t:r')`} = (props: Props) => {
	  return (
	    <div>${1:first}</div>
	  )
	}
snippet tsrafce Creates a React Arrow Function Component with ES7 module system and TypeScript interface
	import React from 'react'
	
	type Props = {}
	
	const ${1:`!v expand('%:t:r')`} = (props: Props) => {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet tsrcc Creates a React component class with ES7 module system and TypeScript interfaces
	import React, { Component } from 'react'
	
	type Props = {}
	
	type State = {}
	
	export default class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {
	  state = {}
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
snippet tsrcredux Creates a React component class with connected redux and ES7 module system and TypeScript interfaces
	import { connect } from 'react-redux'
	import React, { Component } from 'react'
	
	type Props = {}
	
	type State = {}
	
	export class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {
	  state = {}
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	const mapStateToProps = (state) => ({})
	
	const mapDispatchToProps = {}
	
	export default connect(mapStateToProps, mapDispatchToProps)(${1:`!v expand('%:t:r')`})
snippet tsrce Creates a React component class with ES7 module system and TypeScript interfaces
	import React, { Component } from 'react'
	
	type Props = {}
	
	type State = {}
	
	class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {
	  state = {}
	
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet tsrpce Creates a React pure component class with ES7 module system and TypeScript interface
	import React, { PureComponent } from 'react'
	
	type Props = {}
	
	class ${1:`!v expand('%:t:r')`} extends PureComponent<Props> {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet tsrpc Creates a React pure component class with ES7 module system and TypeScript interface
	import React, { PureComponent } from 'react'
	
	type Props = {}
	
	export default class ${1:`!v expand('%:t:r')`} extends PureComponent<Props> {
	  render() {
	    return (
	      <div>${1:first}</div>
	    )
	  }
	}
snippet tsrfc Creates a React Functional Component with ES7 module system and TypeScript interface
	import React from 'react'
	
	type Props = {}
	
	export default function ${1:`!v expand('%:t:r')`}({}: Props) {
	  return (
	    <div>${1:first}</div>
	  )
	}
snippet tsrfce Creates a React Functional Component with ES7 module system and TypeScript interface
	import React from 'react'
	
	type Props = {}
	
	function ${1:`!v expand('%:t:r')`}({}: Props) {
	  return (
	    <div>${1:first}</div>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet tsrnf Creates a React Native Arrow Function Component with ES7 module system in TypeScript
	import { View, Text } from 'react-native'
	import React from 'react'
	
	type Props = {}
	
	const ${1:`!v expand('%:t:r')`} = (props: Props) => {
	  return (
	    <View>
	      <Text>${1:first}</Text>
	    </View>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
snippet tsrnfs Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet
	import { StyleSheet, Text, View } from 'react-native'
	import React from 'react'
	
	type Props = {}
	
	const ${1:`!v expand('%:t:r')`} = (props: Props) => {
	  return (
	    <View>
	      <Text>${1:first}</Text>
	    </View>
	  )
	}
	
	export default ${1:`!v expand('%:t:r')`}
	
	const styles = StyleSheet.create({})
snippet useCallbackSnippet
	useCallback(
	  () => {
	    ${1:first}
	  },
	  [${2:second}],
	)
	
snippet useContextSnippet
	const ${1:first} = useContext(${2:second})
snippet useEffectSnippet
	useEffect(() => {
	  ${1:first}
	
	  return () => {
	    ${2:second}
	  }
	}, [${3:third}])
	
snippet useImperativeHandleSnippet
	useImperativeHandle(
	  ${1:first},
	  () => {
	    ${2:second}
	  },
	  [${3:third}],
	)
snippet useLayoutEffectSnippet
	useLayoutEffect(() => {
	  ${1:first}
	
	  return () => {
	    ${2:second}
	  };
	}, [${3:third}])
snippet useMemoSnippet
	useMemo(() => ${1:first}, [${2:second}])
snippet useReducerSnippet
	const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})
snippet useRefSnippet
	const ${1:first} = useRef(${2:second})
snippet useStateSnippet
	const [${1:first}, set${1/(.*)/table: 0x7f417114d8c0/}] = useState(${2:second})

# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet Err Err(…)
	Err($1)
snippet Ok Ok(…)
	Ok(${1:result})
snippet Some Some(…)
	Some($1)
snippet allow #![allow(…)]
	#![allow($1)]
snippet assert assert!(…);
	assert!($1);
snippet assert_eq assert_eq!(…, …);
	assert_eq!($1, $2);
snippet bench #[bench]
	#[bench]
	fn ${1:name}(b: &mut test::Bencher) {
	    ${2:b.iter(|| ${3:/* benchmark code */})}
	}
snippet cfg #[cfg(…)]
	#[cfg($1)]
snippet cfg! cfg!(…)
	cfg!($1)
snippet cfg_attr #[cfg_attr(…, …)]
	#[cfg_attr($1, $2)]
snippet column column!()
	column!()
snippet concat concat!(…)
	concat!($1)
snippet concat_idents concat_idents!(…)
	concat_idents!($1)
snippet const const …: … = …;
	const ${1:CONST}: ${2:Type} = ${4:init};
snippet debug_assert debug_assert!(…)
	debug_assert!($1);
snippet debug_assert_eq debug_assert_eq!(…, …)
	debug_assert_eq!($1, $2);
snippet deny #![deny(…)]
	#![deny($1)]
snippet derive #[derive(…)]
	#[derive($1)]
snippet else else { … }
	else {
	    ${1:unimplemented!();}
	}
snippet enum enum … { … }
	#[derive(Debug)]
	enum ${1:Name} {
	    ${2:Variant1},
	    ${3:Variant2},
	}
snippet env env!("…")
	env!("$1")
snippet extern-crate extern crate …;
	extern crate ${1:name};
snippet extern-fn extern "C" fn …(…) { … }
	extern "C" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {
	    ${5:// add code here}
	}
snippet extern-mod extern "C" { … }
	extern "C" {
	    ${2:// add code here}
	}
snippet feature #![feature(…)]
	#![feature($1)]
snippet file file!()
	file!()
snippet fn fn …(…) { … }
	fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {
	    ${5:unimplemented!();}
	}
snippet for for … in … { … }
	for ${1:pat} in ${2:expr} {
	    ${3:unimplemented!();}
	}
snippet format format!(…)
	format!("$1")
snippet format_args format_args!(…)
	format_args!("$1")
snippet if if … { … }
	if ${1:condition} {
	    ${2:unimplemented!();}
	}
snippet if-let if let … = … { … }
	if let ${1:Some(pat)} = ${2:expr} {
	    ${0:unimplemented!();}
	}
snippet impl impl … { … }
	impl ${1:Type} {
	    ${2:// add code here}
	}
snippet impl-trait impl … for … { … }
	impl ${1:Trait} for ${2:Type} {
	    ${3:// add code here}
	}
snippet include include!("…");
	include!("$1");
snippet include_bytes include_bytes!("…")
	include_bytes!("$1")
snippet include_str include_str!("…")
	include_str!("$1")
snippet inline-fn inlined function
	#[inline]
	pub fn ${1:name}() {
	    ${2:unimplemented!();}
	}
snippet let let … = …;
	let ${1:pat} = ${2:expr};
snippet line line!()
	line!()
snippet loop loop { … }
	loop {
	    ${2:unimplemented!();}
	}
snippet macro_rules macro_rules! … { … }
	macro_rules! ${1:name} {
	    ($2) => ($3)
	}
snippet macro_use #[macro_use(…)]
	#[macro_use($1)]
snippet main fn main() { … }
	fn main() {
	    ${1:unimplemented!();}
	}
snippet match match … { … }
	match ${1:expr} {
	    ${2:Some(expr)} => ${3:expr},
	    ${4:None} => ${5:expr},
	}
snippet mod mod …;
	mod ${1:name};
snippet mod-block mod … { … }
	mod ${1:name} {
	    ${2:// add code here}
	}
snippet module_path module_path!()
	module_path!()
snippet no_core #![no_core]
	#![no_core]
snippet no_std #![no_std]
	#![no_std]
snippet option_env option_env!("…")
	option_env!("$1")
snippet panic panic!(…);
	panic!("$1");
snippet print print!(…);
	print!("$1");
snippet println println!(…);
	println!("$1");
snippet repr #[repr(…)]
	#[repr($1)]
snippet static static …: … = …;
	static ${1:STATIC}: ${2:Type} = ${4:init};
snippet stringify stringify!(…)
	stringify!($1)
snippet struct struct … { … }
	#[derive(Debug)]
	struct ${1:Name} {
	    ${2:field}: ${3:Type}
	}
snippet struct-tuple struct …(…);
	struct ${1:Name}(${2:Type});
snippet struct-unit struct …;
	struct ${1:Name};
snippet test #[test]
	#[test]
	fn ${1:name}() {
	    ${2:unimplemented!();}
	}
snippet thread_local thread_local!(static …: … = …);
	thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});
snippet trait trait … { … }
	trait ${1:Name} {
	    ${2:// add code here}
	}
	
snippet try try!(…)
	try!($1)
snippet type type … = …;
	type ${1:Alias} = ${2:Type};
snippet unimplemented unimplemented!()
	unimplemented!()
snippet unreachable unreachable!(…)
	unreachable!($1)
snippet vec vec![…]
	vec![$1]
snippet warn #![warn(…)]
	#![warn($1)]
snippet while while … { … }
	while ${1:condition} {
	    ${2:unimplemented!();}
	}
snippet while-let while let … = … { … }
	while let ${1:Some(pat)} = ${2:expr} {
	    ${0:unimplemented!();}
	}
snippet write write!(…)
	write!($1, "$2")
snippet writeln writeln!(…, …)
	writeln!($1, "$2")

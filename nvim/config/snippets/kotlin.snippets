# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet class Snippet for class declaration
	class `!v expand('%:t:r')` {
		$0
	}
snippet constructor Snippet for constructor function
	constructor(${1:arg}: ${2:type}) {
		$0
	}
snippet do Snippet for do...while expression
	do {
		$1
	} while (${2:condition})
snippet finally Snippet for finally block
	finally {
		$1
	}
snippet for Snippet for iterating array with for loop
	for (${1:i} in ${2:0}..${3:5})
		${4:expression}
snippet foreach Snippet for iterating array with for loop
	for (${1:item} in ${2:list})
		${3:expression}
snippet fun Snippet for function declaration
	fun ${1:main}(${2:args} : ${3:Array<String>}) {
		$0
	}
snippet get Snippet for get block
	get() ${1:value}
snippet if Snippet for if expression
	if (${1:condition}) ${2:value}
snippet ifelse Snippet for if...else expression
	if (${1:condition}) 
		${2:value}
	else
		${3:value}
snippet import Snippet for import statement
	import ${1:packageName}
snippet init Snippet for init block
	init {
		$0
	}
snippet open Snippet for open keyword
	open 
snippet override Snippet for override keyword
	override 
snippet package Snippet for package statement
	package ${1:packageName}
snippet set Snippet for set block
	set(${1:arg}: ${2:type}) {
		$0
	}
snippet try Snippet for try block
	try {
		$1
	} catch(${2:e}: ${3:Type}){
		$4
	}
snippet var Snippet for a variable
	var ${1:name} = ${2:value}
snippet val Snippet for a variable
	val ${1:name} = ${2:value}
snippet when Snippet for when expression
	when (${1:value}) {
		${2:branch} -> ${3:branchValue}
	
		else -> ${4:defaultValue}
	}
snippet while Snippet for while expression
	while (${1:condition}) {
		$0
	}

# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet abs Math filter: abs
	| abs
snippet append String filter: append
	| append: '${1:string}'
snippet asset_img_url URL filter: asset img url
	| asset_img_url: '${1:medium}'
snippet asset_url URL filter: asset url
	| asset_url
snippet camelcase String filter: camelcase
	| camelcase
snippet capitalize String filter: capitalize
	| capitalize
snippet ceil Math filter: ceil
	| ceil
snippet concat Array filter: concat
	| concat: ${1:array}
snippet divided_by Math filter: divided by
	| divided_by: ${1:2}
snippet downcase String filter: downcase
	| downcase
snippet escape String filter: escape
	| escape
snippet first Array filter: first
	| first
snippet floor Math filter: floor
	| floor
snippet handleize String filter: handleize
	| handleize
snippet img_tag HTML filter: img tag
	| img_tag
snippet img_tag_param HTML filter: img tag with parameters
	| img_tag: '${1:alt}', '${2:class}'
snippet img_url URL filter: img url
	| img_url: '${1:medium}'
snippet join Array filter: join
	| join: '${1:, }'
snippet last Array filter: last
	| last
snippet lstrip String filter: lstrip
	| lstrip
snippet map Array filter: map
	| map: '${1:key}'
snippet md5 String filter: md5
	| md5
snippet minus Math filter: minus
	| minus: ${1:1}
snippet modulo Math filter: modulo
	| modulo: ${1:2}
snippet money Money filter: money
	| money
snippet money_with_currency Money filter: money with currency
	| money_with_currency
snippet money_without_currency Money filter: money without currency
	| money_without_currency
snippet money_without_trailing_zeros Money filter: money without trailing zeros
	| money_without_trailing_zeros
snippet newline_to_br String filter: newline to br
	| newline_to_br
snippet pluralize String filter: pluralize
	| pluralize: '${1:item}', '${2:items}'
snippet plus Math filter: plus
	| plus: ${1:1}
snippet prepend String filter: prepend
	| prepend: '${1:string}'
snippet remove String filter: remove
	| remove: '${1:string}'
snippet remove_first String filter: remove first
	| remove_first: '${1:string}'
snippet replace String filter: replace
	| replace: '${1:target}', '${2:replace}'
snippet replace_first String filter: replace first
	| replace_first: '${1:target}', '${2:replace}'
snippet reverse Array filter or String filter: reverse
	| reverse
snippet round Math filter: round
	| round: ${1:0}
snippet rstrip String filter: rstrip
	| rstrip
snippet script_tag HTML filter: script tag
	| script_tag
snippet size Array filter: size
	| size
snippet slice String filter: slice
	| slice: ${1:0}, ${2:5}
snippet slice_single String filter: slice with single parameter
	| slice: ${1:at}
snippet sort Array filter: sort
	| sort: '${1:key}'
snippet split String filter: split
	| split: '${1:,}'
snippet strip String filter: strip
	| strip
snippet strip_html String filter: strip html
	| strip_html
snippet strip_newlines String filter: strip newlines
	| strip_newlines
snippet stylesheet_tag HTML filter: stylesheet tag
	| stylesheet_tag
snippet times Math filter: times
	| times: ${1:1}
snippet truncate String filter: truncate
	| truncate: ${1:20}, '${2:...}'
snippet truncatewords String filter: truncatewords
	| truncatewords: ${1:5}, '${2:...}'
snippet uniq Array filter: uniq
	| uniq
snippet upcase String filter: upcase
	| upcase
snippet url_encode String filter: url encode
	| url_encode
snippet url_escape String filter: url escape
	| url_escape
snippet url_param_escape String filter: url param escape
	| url_param_escape
snippet _schema
	{% schema %}
		{
			"name": "$1",
			"class": "$2",
			"settings": [
			$3
			]
		}
	{% endschema %}
	
snippet _article
	{
		"type": "article",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _blocks
	"blocks": [
		{
			"type": "$1",
			"name": "$2",
			"settings": [
				$3
			]
		},$4
	]
	
snippet _blog
	{
		"type": "blog",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _checkbox
	{
		"type": "checkbox",
		"id": "$1",
		"label": "$2",
		"default": ${3|false,true|},
		"info": "$4"
	},$5
snippet _collections
	{
		"type": "collection",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _color
	{
		"type": "color",
		"id": "$1",
		"label": "$2",
		"default": "$3",
		"info": "$4"
	},$5
snippet _font
	{
		"type": "font_picker",
		"id": "$1",
		"label": "$2",
		"info": "$3",
		"default": "${4|Abel,Abril Fatface,Agmena,Akko,Alegreya,Alegreya Sans,Alfie,Americana,Amiri,Anonymous Pro,Antique Olive,Arapey,Archivo Narrow,Arimo,Armata,Arvo,Asap,Assistant,Asul,Avenir Next,Avenir Next Rounded,Azbuka,Basic Commercial,Basic Commercial Soft Rounded,Baskerville No 2,Bauer Bodoni,Beefcakes,Bembo Book,Bernhard Modern,Bio Rhyme,Bitter,Bodoni Poster,Burlingame,Cabin,Cachet,Cardamon,Cardo,Carter Sans,Caslon Bold,Caslon Old Face,Catamaran,Centaur,Century Gothic,Chivo,Chong Modern,Claire News,Cooper BT,Courier New,Crimson Text,DIN Neuzeit Grotesk,DIN Next,DIN Next Slab,Daytona,Domine,Dosis,Electra,Eurostile Next,FF Meta,FF Meta Serif,FF Tisa,FF Tisa Sans,FF Unit,FF Unit Rounded,FF Unit Slab,Fette Gotisch,Fira Sans,Fjalla One,Friz Quadrata,Frutiger Serif,Futura,Garamond,Geometric 415,Georgia Pro,Gill Sans Nova,Glegoo,Goudy Old Style,Harmonia Sans,Helvetica,Humanist 521,IBM Plex Sans,ITC Avant Garde Gothic,ITC Benguiat,ITC Berkeley Old Style,ITC Bodoni Seventytwo,ITC Bodoni Twelve,ITC Caslon No 224,ITC Charter,ITC Cheltenham,ITC Clearface,ITC Conduit,ITC Esprit,ITC Founders Caslon,ITC Franklin Gothic,ITC Galliard,ITC Gamma,ITC Goudy Sans,ITC Johnston,ITC Mendoza Roman,ITC Modern No 216,ITC New Baskerville,ITC New Esprit,ITC New Veljovic,ITC Novarese,ITC Officina Sans,ITC Officina Serif,ITC Stepp,ITC Stone Humanist,ITC Stone Informal,ITC Stone Sans II,ITC Stone Serif,ITC Tapioca,Inconsolata,Joanna Nova,Joanna Sans Nova,Josefin Sans,Josefin Slab,Kairos,Kalam,Karla,Kreon,Lato,Laurentian,Libelle,Libre Baskerville,Libre Franklin,Linotype Didot,Linotype Gianotten,Linotype Really,Linotype Syntax Serif,Lobster,Lobster Two,Lora,Lucia,Lucida Grande,Luthersche Fraktur,Madera,Malabar,Mariposa Sans,Maven Pro,Megrim,Melior,Memphis,Memphis Soft Rounded,Mentor Sans,Merriweather Sans,Metro Nova,Modern No 20,Monaco,Monotype Baskerville,Monotype Bodoni,Monotype Century Old Style,Monotype Goudy,Monotype Goudy Modern,Monotype Italian Old Style,Monotype New Clarendon,Monotype News Gothic,Monotype Sabon,Montserrat,Mouse Memoirs,Muli,Mundo Sans,Neo Sans,Neue Aachen,Neue Frutiger 1450,Neue Haas Unica,Neue Swift,Neuton,Neuzeit Office,Neuzeit Office Soft Rounded,Neuzeit S,New Century Schoolbook,News 702,News 705,News Cycle,News Gothic No 2,News Plantin,Nobile,Noticia Text,Noto Serif,Nunito,Nunito Sans,Old Standard TT,Open Sans,Open Sans Condensed,Optima nova,Oswald,Ovo,Oxygen,PMN Caecilia,PT Mono,PT Sans,PT Sans Narrow,PT Serif,Pacifico,Palatino,Parma,Perpetua,Plantin,Playfair Display,Poppins,Prata,Prompt,Quantico,Quattrocento,Quattrocento Sans,Questrial,Quicksand,Quire Sans,Rajdhani,Raleway,Really No 2,Righteous,Roboto,Roboto Condensed,Roboto Mono,Roboto Slab,Rockwell,Rubik,Sabon Next,Sackers Square Gothic,Sagrantino,Scene,Scherzo,Shadows Into Light,Slate,Soho,Soho Gothic,Source Code Pro,Source Sans Pro,Stempel Schneidler,Swiss 721,Swiss 721 Rounded,Tenor Sans,Tiemann,Times New Roman,Tinos,Titillium Web,Trade Gothic,Trade Gothic Next,Trebuchet MS,Twentieth Century,Ubuntu,Unica One,Univers Next,Univers Next Typewriter,Unna,Vala,Varela,Varela Round,Verdana Pro,Volkhov,Vollkorn,Waza,Wola,Work Sans,Ysobel|}"
	},$5
snippet _header
	{
		"type": "header",
		"content": "$1",
		"info": "$2"
	},$3
snippet _html
	{
		"type": "html",
		"id": "$1",
		"label": "$2",
		"default": "<div>$3</div>"
	},$4
snippet _image_picker
	{
		"type": "image_picker",
		"id": "$1",
		"label": "$2"
	},$3
snippet _link_list
	{
		"type": "link_list",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _page
	{
		"type": "page",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _paragraph
	{
		"type": "paragraph",
		"content": "$1"
	},$2
snippet _product
	{
		"type": "product",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _radio
	{
		"type": "radio",
		"id": "$1",
		"label": "$2",
		"options": [
			{ "value": "$6", "label": "$7" }
		],
		"default": "$3",
		"info": "$4"
	},$5
snippet _range
	{
		"type": "range",
		"id": "$1",
		"min": "$2",
		"max": "$3",
		"step": "$4",
		"unit": "$5",
		"label": "$6",
		"default": "$7"
	},$8
snippet _richtext
	{
		"type": "richtext",
		"id": "$1",
		"label": "$2",
		"default": "<p>$3</p>"
	},$4
snippet _select
	{
		"type": "select",
		"id": "$1",
		"label": "$2",
		"options": [
			{
			"group": "$6",
			"value": "$7",
			"label": "$8"
			}
		],
		"default": "$3",
		"info": "$4"
	},$5
snippet _text
	{
		"type": "text",
		"id": "$1",
		"label": "$2",
		"default": "$3",
		"info": "$4",
		"placeholder": "$5"
	},$6
snippet _textarea
	{
		"type": "textarea",
		"id": "$1",
		"label": "$2",
		"default": "$3",
		"info": "$4",
		"placeholder": "$5"
	},$6
snippet _url
	{
		"type": "url",
		"id": "$1",
		"label": "$2",
		"info": "$3"
	},$4
snippet _video
	{
		"type": "video_url",
		"id": "$1",
		"label": "$2",
		"accept": [$7"youtube", "vimeo"],
		"default": "$3",
		"info": "$4",
		"placeholder": "$5"
	},$6
snippet limit For loops option
	limit: ${1:5}
snippet offset For loops option
	offset: ${1:0}
snippet reversed For loops option
	reversed
snippet assign Variable tag: assign
	{% assign ${1:variable} = ${2:value} %}
snippet assign- Variable tag: assign, whitespaced
	{%- assign ${1:variable} = ${2:value} -%}
snippet break Iteration tag: break
	{% break %}
snippet capture Variable tag: capture
	{% capture ${1:variable} %}$2{% endcapture %}
snippet capture- Variable tag: capture, whitespaced
	{%- capture ${1:variable} -%}$2{%- endcapture -%}
snippet case Control flow tag: case
	{% case ${1:variable} %}
		{% when ${2:condition} %}
			$3
		{% else %}
			$4
	{% endcase %}
snippet case- Control flow tag: case, whitespaced
	{%- case ${1:variable} -%}
		{%- when ${2:condition} -%}
			$3
		{%- else -%}
			$4
	{%- endcase -%}
snippet comment- Comment tag: comment, whitespaced
	{%- comment -%}$1{%- endcomment -%}
snippet continue Iteration tag: continue
	{% continue %}
snippet continue- Iteration tag: continue, whitespaced
	{%- continue -%}
snippet cycle Iteration tag: cycle
	{% cycle '${1:odd}', '${2:even}' %}
snippet cyclegroup Iteration tag: cycle group
	{% cycle '${1:group name}': '${2:odd}', '${3:even}' %}
snippet cyclegroup- Iteration tag: cycle group, whitespaced
	{%- cycle '${1:group name}': '${2:odd}', '${3:even}' -%}
snippet cycle- Iteration tag: cycle, whitespaced
	{%- cycle '${1:odd}', '${2:even}' -%}
snippet decrement Variable tag: decrement
	{% decrement ${1:variable} %}
snippet else Control flow tag: else
	{% else %}
		
snippet else- Control flow tag: else, whitespaced
	{%- else -%}
		
snippet elsif Control flow tag: elsif
	{% elsif ${1:condition} %}
		
snippet elsif- Control flow tag: elsif, whitespaced
	{%- elsif ${1:condition} -%}
		
snippet for Iteration tag: for
	{% for ${1:item} in ${2:collection} %}
		$3
	{% endfor %}
snippet for- Iteration tag: for, whitespaced
	{%- for ${1:item} in ${2:collection} -%}
		$3
	{%- endfor -%}
snippet if Control flow tag: if
	{% if ${1:condition} %}
		$2
	{% endif %}
snippet ifelse Control flow tag: if else
	{% if ${1:condition} %}
		$2
	{% else %}
		$3
	{% endif %}
snippet ifelse- Control flow tag: if else, whitespaced
	{%- if ${1:condition} -%}
		$2
	{%- else -%}
		$3
	{%- endif -%}
snippet if- Control flow tag: if, whitespaced
	{%- if ${1:condition} -%}
		$2
	{%- endif -%}
snippet include Theme tag: include
	{% include '${1:snippet}' %}
snippet includewith Theme tag: include with parameters
	{% include '${1:snippet}', ${2:variable}: ${3:value} %}
snippet increment Variable tag: increment
	{% increment ${1:variable} %}
snippet javascript Javascript tag: javascript
	{% javascript %}
		$4
	{% endjavascript %}
snippet layout Theme tag: layout
	{% layout '${1:layout}' %}
snippet layoutnone Theme tag: layout none
	{% layout none %}
snippet paginate Theme tag: paginate
	{% paginate ${1:collection.products} by ${2:12} %}
		{% for ${3:product} in ${1:collection.products} %}
			$4
		{% endfor %}
	{% endpaginate %}
snippet raw Theme tag: raw
	{% raw %}$1{% endraw %}
snippet render Theme tag: render
	{% render '${1:snippet}' %}
snippet renderwith Theme tag: render with parameters
	{% render '${1:snippet}', ${2:variable}: ${3:value} %}
snippet schema Schema tag: schema
	{% schema %}
		{
			$1
		}
	{% endschema %}
snippet section Theme tag: section
	{% section '${1:snippet}' %}
snippet stylesheet Stylesheet tag: stylesheet
	{% stylesheet %}
		$1
	{% endstylesheet %}
snippet stylesheet_scss Stylesheet tag: stylesheet for scss
	{% stylesheet '${1:scss}' %}
		$2
	{% endstylesheet %}
snippet tablerow Iteration tag: tablerow
	{% tablerow ${1:item} in ${2:collection} cols: ${3:2} %}
		$4
	{% endtablerow %}
snippet tablerow- Iteration tag: tablerow, whitespaced
	{%- tablerow ${1:item} in ${2:collection} cols: ${3:2} -%}
		$4
	{%- endtablerow -%}
snippet unless Control flow tag: unless
	{% unless ${1:condition} %}
		$2
	{% endunless %}
snippet unless- Control flow tag: unless, whitespaced
	{%- unless ${1:condition} -%}
		$2
	{%- endunless -%}
snippet when Control flow tag: when
	{% when ${1:condition} %}
	$0
snippet when- Control flow tag: when, whitespaced
	{%- when ${1:condition} -%}
	$0

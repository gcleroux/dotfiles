# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet def Code snippet for #define " "
	#define $0
snippet #if Code snippet for #if
	#if ${1:0}
	$0
	#endif /* $1 */
snippet #ifdef Code snippet for #ifdef
	#ifdef ${1:DEBUG}
	$0
	#endif /* $1 */
snippet #ifndef Code snippet for #ifndef
	#ifndef ${1:DEBUG}
	$0
	#endif /* !$1 */
snippet #imp Code snippet for #import " "
	#import "$0"
snippet #imp< Code snippet for #import < >
	#import <$0>
snippet #inc Code snippet for #include " "
	#include "$0"
snippet #inc< Code snippet for #include < >
	#include <$0>
snippet @proto Create a @protocol
	@protocol(${1:protocol name}}
snippet @selector Create a @selector
	@selector(${1:method}}
snippet @synchronized Create a finally block
	@synchronized (${1:token}) {
		${2:statements}
	}
snippet fieldblock Create a block field
	:(${1:void} (^${2:nullability}) (${3:parameters}))\${4:name)
snippet @propertyblock Create a block property
	@property (nonatomic, copy, ${1:nullability}) ${2:void} (^${3:name})(${4:parameters});
	
snippet blockvar Create a block local variable
	${1:void} (^${2:name}) (${3:parameters}) = ^${1:void}(${3:parameters}) {
	
	};
	
snippet typedefblock Create a block field
	typedef ${1:void} (^${2:type_name}) (${3:parameters})
snippet @implementation Create an Objc Class implementation
	@implementation ${1:`!v expand('%:t:r')`}
	
	${2:methods}
	
	@end
snippet class Create an Objc Class interface
	NS_ASSUME_NONNULL_BEGIN
	
	@interface ${1:`!v expand('%:t:r')`} : ${2:NSObject}
	
	$3
	
	@end
	
	NS_ASSUME_NONNULL_END
snippet @interface Create an Objc Class interface
	NS_ASSUME_NONNULL_BEGIN
	
	@interface ${1:`!v expand('%:t:r')`} : ${2:NSObject}
	
	$3
	
	@end
	
	NS_ASSUME_NONNULL_END
snippet funcci Create an Objc class method implementation
	+ (${1:void}) ${2:func name} {
	$4
	}
snippet +impl Create an Objc class method implementation
	+ (${1:void}) ${2:func name} {
	$4
	}
snippet funccd Create an Objc class method interface
	+ (${1:void}) ${2:func name};
	
snippet +interface Create an Objc class method interface
	+ (${1:void}) ${2:func name};
	
snippet funcii Create an Objc instance method implementation
	- (${1:void}) ${2:func name} {
	$4
	}
snippet -impl Create an Objc instance method implementation
	- (${1:void}) ${2:func name} {
	$4
	}
snippet funcid Create an Objc instance method interface
	- (${1:void}) ${2:func name};
	
snippet -interface Create an Objc instance method interface
	- (${1:void}) ${2:func name};
	
snippet prop Create an Objc property
	@property (nonatomic, ${1:memory control}) ${2:property};
	
snippet @property Create an Objc property
	@property (nonatomic, ${1:memory control}) ${2:property};
	
snippet mp Create an Objc property with copied text
	@property (nonatomic, ${1:memory control}) ${2:type} ${3:`!v getreg(v:register)`};
	
snippet makeproperty Create an Objc property with copied text
	@property (nonatomic, ${1:memory control}) ${2:type} ${3:`!v getreg(v:register)`};
	
snippet proto Create an Objc protocol declaration
	NS_ASSUME_NONNULL_BEGIN
	
	@protocol ${1:protocol name} : ${2:NSObject}
	
	$3
	
	@end
	
	NS_ASSUME_NONNULL_END
snippet @protocol Create an Objc protocol declaration
	NS_ASSUME_NONNULL_BEGIN
	
	@protocol ${1:protocol name} : ${2:NSObject}
	
	$3
	
	@end
	
	NS_ASSUME_NONNULL_END
snippet dispatchasync Create a dispatch_async
	dispatch_async(${1:dispatch_queue_t  _Nonnull queue}, ${2:^(void)block})
snippet dispatchgetglobalqueue Create a dispatch_get_global_queue
	dispatch_get_global_queue(${1:intptr_t identifier}, ${2:uintptr_t flags})
snippet dispatchgetmainqueue Create a dispatch_get_main_queue
	dispatch_get_main_queue()
snippet dispatchoncesnip Create a dispatch_once
	static dispatch_once_t onceToken;
	dispatch_once(&onceToken, ^{
		${1:code to be executed once}
	});
snippet dispatchsemaphorecreate Create a dispatch_semaphore_create
	dispatch_semaphore_create(${1:intptr_t value})
snippet dispatchsync Create a dispatch_sync
	dispatch_sync(${1:dispatch_queue_t  _Nonnull queue}, ${2:^(void)block})
snippet do Creates a do...while loop
	do {
		$1
	} while($2);
snippet field Create an Objc instance method implementation
	:(${1:type}) ${2:field}
snippet mark Create a MARK
	// MARK: - ${1:lable}
snippet markdata Create a MARK: - Data
	// MARK: - Public
snippet markoverride Create a MARK: - Override
	// MARK: - Override
snippet markprivate Create a MARK: - Private
	// MARK: - Private
snippet markpublic Create a MARK: - Public
	// MARK: - Public
snippet markui Create a MARK: - UI
	// MARK: - UI
snippet markselected Create a MARK for copied text
	// MARK: - `!v getreg(v:register)`
snippet main A standard main function for a C program
	int main (int argc, char *argv[])
	{
		$0
		return 0;
	}
snippet NSLog Create a NSLog
	NSLog(@"${1:%@}"$2);
snippet sst A standard starter template for a C program
	#include <stdio.h>
	
	int main (int argc, char *argv[])
	{
		$0
		return 0;
	}
snippet libsst A standard starter template for a C program with stdlib included
	#include <stdio.h>
	#include <stdlib.h>
	
	int main (int argc, char *argv[])
	{
		$0
		return 0;
	}
snippet case Code snippet for case branch
	case $1:
		$0
		break;
snippet @catch Create a catch block
	@catch (NSException * e) {
		${2:handler}
	}
snippet else Code snippet for else statement
	else {
		$0
	}
snippet else if Code snippet for else-if statement
	else if ($1) {
		$0
	}
snippet enum Code snippet for enum
	enum ${1:MyEnum} {
		$0
	};
snippet @finally Create a finally block
	@finally {
		${0:statements}
	}
snippet for Code snippet for 'for' loop
	for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {
		$0
	}
snippet forin Code snippet for reverse 'forin' loop
	for (${1:type *object} in ${2:collection}) {
		${3:statements}
	}
snippet forr Code snippet for reverse 'for' loop
	for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {
		$0
	}
snippet if Code snippet for if statement
	if ($1) {
		$0
	}
snippet nsenum Code snippet for NS_ENUM
	typedef NS_ENUM(NSUInteger, ${1:MyEnum}) {
		${2:MyEnumValueA},
		${3:MyEnumValueB},
		${4:MyEnumValueC},
	};
snippet nsoptions Code snippet for NS_OPTIONS
	typedef NS_ENUM(NSUInteger, ${1:MyEnum}) {
		${2:MyEnumValueA} = 1 << 0,
		${3:MyEnumValueB} = 1 << 1,
		${4:MyEnumValueC} = 1 << 2,
	};
snippet struct Code snippet for struct
	struct ${1:MyStruct} {
		$0
	};
snippet switch Code snippet for switch statement
	switch (${1:switch_on}) {
		default:
			$0
			break;
	}
snippet @try Create a try-catch-finally block
	@try {
		${1:statements}
	}
	@catch (NSException * e) {
		${2:handler}
	}
	@finally {
		${0:statements}
	}
snippet structt Code snippet to define a type with struct
	typedef struct {
		$0
	} ${1:MyStruct};
snippet union Code snippet for union
	union ${1:MyUnion} {
		$0
	};
snippet while 
	while ($1) {
		$0
	}

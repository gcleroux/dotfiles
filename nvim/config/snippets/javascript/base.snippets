# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet dowhile Do-While Statement
	do {
		$0
	} while (${1:condition});
snippet for For Loop
	for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {
		const ${3:element} = ${2:array}[${1:index}];
		$0
	}
snippet foreach For-Each Loop
	${1:array}.forEach(${2:element} => {
		$0
	});
snippet forin For-In Loop
	for (const ${1:key} in ${2:object}) {
		if (${2:object}.hasOwnProperty(${1:key})) {
			const ${3:element} = ${2:object}[${1:key}];
			$0
		}
	}
snippet forof For-Of Loop
	for (const ${1:iterator} of ${2:object}) {
		$0
	}
snippet function Function Statement
	function ${1:name}(${2:params}) {
		$0
	}
snippet if If Statement
	if (${1:condition}) {
		$0
	}
snippet ifelse If-Else Statement
	if (${1:condition}) {
		$0
	} else {
		
	}
snippet import statement Import external module.
	import { $0 } from "${1:module}";
snippet jp
	JSON.parse($0)
snippet js
	JSON.stringify($0)
snippet error Log error to the console
	console.error($1);
	$0
snippet warn Log warning to the console
	console.warn($1);
	$0
snippet new New Statement
	const ${1:name} = new ${2:type}(${3:arguments});$0
snippet cb
	function (err, ${1:value}) {
		if (err) throw err
		$0
	}
snippet oa
	Object.assign(${1:dest}, ${2:source})
snippet oc
	Object.create(${1:obj})
snippet od
	Object.defineProperty(${1:dest}, '${2:prop}', {
		$0
	})
snippet oe
	Object.entries(${1:obj})
snippet og
	Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')
snippet ok
	Object.keys(${1:obj})
snippet ov
	Object.values(${1:obj})
snippet p
	Promise
snippet pa
	Promise.all(${1:value})
snippet pc
	${1:promise}.catch(error => {
		$0
	})
snippet prj
	Promise.reject(${1:value})
snippet prs
	Promise.resolve(${1:value})
snippet pt
	${1:promise}.then((${2:value}) => {
		$0
	})
snippet #endregion Folding Region End
	//#endregion
snippet #region Folding Region Start
	//#region $0
snippet setinterval Set Interval Function
	setInterval(() => {
		$0
	}, ${1:interval});
snippet settimeout Set Timeout Function
	setTimeout(() => {
		$0
	}, ${1:timeout});
snippet switch Switch Statement
	switch (${1:key}) {
		case ${2:value}:
			$0
			break;
	
		default:
			break;
	}
snippet trycatch Try-Catch Statement
	try {
		$0
	} catch (${1:error}) {
		
	}
snippet while While Statement
	while (${1:condition}) {
		$0
	}
snippet ae
	${1:document}.addEventListener('${2:event}', ${3:ev} => {
		$0
	})
snippet aft
	after(() => {
		$0
	})
snippet afe
	afterEach(() => {
		$0
	})
snippet fan
	function (${1:arguments}) {$0}
snippet heac
	${1:el}.appendChild(${2:elem})
snippet af
	(${1:arguments}) => ${2:statement}
snippet f
	(${1:arguments}) => {
		$0
	}
snippet fd
	({${1:arguments}}) => ${2:statement}
snippet fdr
	({${1:arguments}}) => ${1:arguments}
snippet fr
	(${1:arguments}) => {
		return $0
	}
snippet aa
	async (${1:arguments}) => {
		$0
	}
snippet asf
	async function (${1:arguments}) {
		$0
	}
snippet aiife
	;(async (${1:arguments}) => {
		$0
	})($2)
snippet a
	await $0
snippet apa
	await Promise.all(${1:value})
snippet apm
	await Promise.all(${1:array}.map(async (${2:value}) => {
		$0
	}))
snippet apad
	const [$0] = await Promise.all(${1:value})
snippet ast
	await new Promise((r) => setTimeout(r, $0))
snippet bf
	before(async () => {
		$0
	})
snippet ba
	beforeAll(async () => {
		$0
	})
snippet bfe
	beforeEach(async () => {
		$0
	})
snippet cs
	class ${1:name} {
		constructor (${2:arguments}) {
			$0
		}
	}
snippet csx
	class ${1:name} extends ${2:base} {
		constructor (${3:arguments}) {
			super(${3:arguments})
			$0
		}
	}
snippet hecla
	${1:el}.classList.add('${2:class}')
snippet heclr
	${1:el}.classList.remove('${2:class}')
snippet hect
	${1:el}.classList.toggle('${2:class}')
snippet cod
	console.dir('$1:', $1)
snippet ce
	console.error($0)
snippet cl
	console.log($0)
snippet cv
	console.log('$1:', $1)
snippet cw
	console.warn($0)
snippet car
	const ${1:name} = [
		$0
	]
snippet cf
	const ${1:name} = (${2:arguments}) => {
		return $0
	}
snippet ca
	const ${1:name} = await ${2:value}
snippet cy
	const ${1:name} = yield ${2:value}
snippet cda
	const { ${1:name} } = await ${2:value}
snippet cr
	const ${1:module} = require('${1:module}')
snippet co
	const ${1:name} = {
		$0
	}
snippet c
	const ${1:name}
snippet cad
	const [ ${2:prop} ] = ${1:value}
snippet cd
	const { ${2:prop} } = ${1:value}
snippet cn
	constructor () {
		$0
	}
snippet cdf
	${1:document}.createDocumentFragment(${2:elem})
snippet cel
	${1:document}.createElement(${2:elem})
snippet define define module
	define([
		'require',
		'${1:dependency}'
	], function(require, ${2:factory}) {
		'use strict';
		$0
	});
snippet desc
	describe('${1:description}', () => {
		$0
	})
snippet dt
	describe('`!v expand('%:t:r')`', () => {
		$0
	})
snippet evc
	ev.preventDefault()
	ev.stopPropagation()
	return false
snippet ei
	else if (${1:condition}) {
		$0
	}
snippet el
	else {
		$0
	}
snippet on
	${1:emitter}.on('${2:event}', (${3:arguments}) => {
		$0
	})
snippet every
	${1:iterable}.every((${2:item}) => {
		$0
	})
snippet ef
	export function ${1:member} (${2:arguments}) {
		$0
	}
snippet em
	exports.${1:member} = ${2:value}
snippet filter
	${1:iterable}.filter((${2:item}) => {
		$0
	})
snippet find
	${1:iterable}.find((${2:item}) => {
		$0
	})
snippet fe
	${1:iterable}.forEach((${2:item}) => {
		$0
	})
snippet gari0
	[...Array(${1:length}).keys()]
snippet gari
	Array.from({ length: ${1:length} }, (v, k) => k + 1)
snippet gf
	function* (${1:arguments}) {
		$0
	}
snippet hega
	${1:el}.getAttribute('${2:attr}')
snippet gi
	${1:document}.getElementById('${2:id}')
snippet gc
	Array.from(${1:document}.getElementsByClassName('${2:class}'))
snippet gt
	Array.from(${1:document}.getElementsByTagName('${2:tag}'))
snippet get
	get ${1:property} () {
		$0
	}
snippet gs
	get ${1:property} () {
		$0
	}
	set ${1:property} (${2:value}) {
		
	}
snippet iife
	;(function (${1:arguments}) {
		$0
	})($2)
snippet im
	import ${2:*} from '${1:module}'
snippet ia
	import ${2:*} as ${3:name} from '${1:module}'
snippet id
	import {$2} from '${1:module}'
snippet iof
	${1:source} instanceof ${2:Object}
snippet it
	it('${1:description}', async () => {
		$0
	})
snippet its
	it('${1:description}', () => {
		$0
	})
snippet itd
	it('${1:description}', (done) => {
		$0
	})
snippet itt
	it.todo('${1:description}')
snippet lif
	let $0 
	 if (${2:condition}) {
		$1
	}
snippet la
	let ${1:name} = await ${2:value}
snippet ly
	let ${1:name} = yield ${2:value}
snippet l
	let ${1:name}
snippet map
	${1:iterable}.map((${2:item}) => {
		$0
	})
snippet m
	${1:method} (${2:arguments}) {
		$0
	}
snippet mec
	class ${1:name} {
		constructor (${2:arguments}) {
			$0
		}
	}
	
	module.exports = ${1:name}
	
snippet ed
	export default ${1:member}
snippet edf
	export default function ${1:name} (${2:arguments}) {
		$0
	}
snippet e
	export ${1:member}
snippet ec
	export const ${1:member} = ${2:value}
snippet me
	module.exports = ${1:name}
snippet fn
	function ${1:name} (${2:arguments}) {
		$0
	}
snippet gfn
	function* ${1:name}(${2:arguments}) {
		$0
	}
snippet np
	new Promise((resolve, reject) => {
		$0
	})
snippet pe
	process.env
snippet proto
	${1:Class}.prototype.${2:method} = function (${3:arguments}) {
		$0
	}
snippet qs
	${1:document}.querySelector('${2:selector}')
snippet qsa
	Array.from(${1:document}.querySelectorAll('${2:selector}'))
snippet reduce
	${1:iterable}.reduce((${2:previous}, ${3:current}) => {
		$0
	}${4:, initial})
snippet hera
	${1:el}.removeAttribute('${2:attr}')
snippet herc
	${1:el}.removeChild(${2:elem})
snippet rel
	${1:document}.removeEventListener('${2:event}', ${3:listener})
snippet rq
	require('${1:module}')
snippet r
	return $0
snippet rf
	return (${1:arguments}) => ${2:statement}
snippet ra
	return [
		$0
	]
snippet ro
	return {
		$0
	}
snippet rn
	return null
snippet rp
	return new Promise((resolve, reject) => {
		$0
	})
snippet rt
	return ${0:this}
snippet hesa
	${1:el}.setAttribute('${2:attr}', ${3:value})
snippet sim
	setImmediate(() => {
		$0
	})
snippet set
	set ${1:property} (${2:value}) {
		$0
	}
snippet some
	${1:iterable}.some((${2:item}) => {
		$0
	})
snippet te
	${1:cond} ? ${2:true} : ${3:false}
snippet ta
	const $0 = ${1:cond} ? ${2:true} : ${3:false}
snippet t
	this.
snippet tn
	throw new ${0:error}
snippet tc
	try {
		$0
	} catch (${1:err}) {
		
	}
snippet tcf
	try {
		$0
	} catch (${1:err}) {
		
	} finally {
		
	}
snippet tf
	try {
		$0
	} finally {
		
	}
snippet to
	typeof ${1:source} === '${2:undefined}'
snippet uss
	'use strict'
snippet va
	var ${1:name} = ${2:value}
snippet v
	var ${1:name}
snippet wid
	let ${1:array}Index = ${1:array}.length
	while (${1:array}Index--) {
		$0
	}
snippet y
	yield $0

# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet con Adds a default constructor for the class that contains props as arguments
	constructor (props) {
		super(props)
		$0
	}
	
snippet conc Adds a default constructor for the class that contains props and context as arguments
	constructor (props, context) {
		super(props, context)
		$0
	}
	
snippet cdm Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.
	componentDidMount () {
		$0
	}
	
snippet cdup Invoked immediately after the component's updates are flushed to the DOM.
	componentDidUpdate (prevProps, prevState) {
		$0
	}
	
snippet cgd Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates.
	
	static getDerivedStateFromProps(nextProps, prevState) {
		$0
	}
	
snippet tp Access component's props
	this.props.$0
snippet ren When called, it should examine this.props and this.state and return a single child element.
	render () {
		return (
			<div>
				$0
			</div>
		)
	}
snippet ssf Performs a shallow merge of nextState into current state
	this.setState((state, props) => { return { $0 }})
	
snippet sst Performs a shallow merge of nextState into current state
	this.setState($0)
snippet ts Access component's state
	this.state.$0
snippet cwm Invoked once, both on the client and server, immediately before the initial rendering occurs
	
	componentWillMount () {
		$0
	}
	
snippet cwr Invoked when a component is receiving new props. This method is not called for the initial render.
	componentWillReceiveProps (nextProps) {
		$0
	}
	
snippet cwun Invoked immediately before a component is unmounted from the DOM.
	componentWillUnmount () {
		$0
	}
	
snippet cwup Invoked immediately before rendering when new props or state are being received.
	componentWillUpdate (nextProps, nextState) {
		$0
	}
	
snippet desc Testing `describe` block
	describe('$1', () => {
	  $0
	})
	
snippet dp
	const { ${1:name} } = this.props
snippet ds
	const { ${1:name} } = this.state
snippet ifr
	if (!${1:condition}) {
		return null
	}
snippet tita Testing async `it` block
	it('should $1', async () => {
	  $0
	})
	
snippet tit Testing `it` block
	it('should $1', () => {
	  $0
	})
	
snippet j an element
	<${1:elementName}>
		$0
	</$1>
snippet jc an element self closed
	<${1:elementName} />
snippet jm an element self closed
	{${1:array}.map((item) => <${2:elementName} key={item.id}>
		$0
	</$2>)}
snippet jmr an element self closed
	{${1:array}.map((item) => {
		return <${2:elementName} key={item.id}>
		$0
	</$2>
	})}
snippet pta Array prop type
	PropTypes.array,
snippet ptao An array of a certain type
	PropTypes.arrayOf($0),
snippet ptaor An array of a certain type required
	PropTypes.arrayOf($0).isRequired,
snippet ptar Array prop type required
	PropTypes.array.isRequired,
snippet ptb Bool prop type
	PropTypes.bool,
snippet ptbr Bool prop type required
	PropTypes.bool.isRequired,
snippet ptel React element prop type
	PropTypes.element,
snippet ptelr React element prop type required
	PropTypes.element.isRequired,
snippet pte Prop type limited to specific values by treating it as an enum
	PropTypes.oneOf(['$0']),
snippet pter Prop type limited to specific values by treating it as an enum required
	PropTypes.oneOf(['$0']).isRequired,
snippet ptf Func prop type
	PropTypes.func,
snippet ptfr Func prop type required
	PropTypes.func.isRequired,
snippet pti Is an instance of a class prop type
	PropTypes.instanceOf($0),
snippet ptir Is an instance of a class prop type required
	PropTypes.instanceOf($0).isRequired,
snippet ptnd Anything that can be rendered: numbers, strings, elements or an array
	PropTypes.node,
snippet ptndr Anything that can be rendered: numbers, strings, elements or an array required
	PropTypes.node.isRequired,
snippet ptn Number prop type
	PropTypes.number,
snippet ptnr Number prop type required
	PropTypes.number.isRequired,
snippet pto Object prop type
	PropTypes.object,
snippet ptoo An object with property values of a certain type
	PropTypes.objectOf($0),
snippet ptoor An object with property values of a certain type required
	PropTypes.objectOf($0).isRequired,
snippet ptor Object prop type required
	PropTypes.object.isRequired,
snippet ptet An object that could be one of many types
	PropTypes.oneOfType([
		$0
	]),
snippet ptetr An object that could be one of many types required
	PropTypes.oneOfType([
		$0
	]).isRequired,
snippet ptsh An object taking on a particular shape
	PropTypes.shape({
		$0
	}),
snippet ptshr An object taking on a particular shape required
	PropTypes.shape({
		$0
	}).isRequired,
snippet pts String prop type
	PropTypes.string,
snippet ptsr String prop type required
	PropTypes.string.isRequired,
snippet rpt Creates empty propTypes declaration
	$1.propTypes = {
		$2
	}
snippet rcc Creates a React component class
	import { Component } from 'react'
	
	class `!v expand('%:t:r')` extends Component {
		render () {
			return (
				<div>
					$0
				</div>
			)
		}
	}
	
	export default $1
snippet rccp Creates a React component class with PropTypes
	import { Component, PropTypes } from 'react'
	
	class `!v expand('%:t:r')` extends Component {
		render () {
			return (
				<div>
					$0
				</div>
			)
		}
	}
	
	$1.propTypes = {
	
	}
	
	export default $1
snippet rcfc Creates a React component class with PropTypes and all lifecycle methods
	import { Component, PropTypes } from 'react'
	
	class `!v expand('%:t:r')` extends Component {
		constructor(props) {
			super(props)
	
		}
	
		componentWillMount () {
	
		}
	
		componentDidMount () {
	
		}
	
		componentWillReceiveProps (nextProps) {
	
		}
	
		shouldComponentUpdate (nextProps, nextState) {
	
		}
	
		componentWillUpdate (nextProps, nextState) {
	
		}
	
		componentDidUpdate (prevProps, prevState) {
	
		}
	
		componentWillUnmount () {
	
		}
	
		render () {
			return (
				<div>
	
				</div>
			)
		}
	}
	
	$1.propTypes = {
	
	}
	
	export default $1
snippet rfc Creates a React function component without PropTypes
	
	const `!v expand('%:t:r')` = () => {
		return (
			<div>
				$0
			</div>
		)
	}
	
	export default `!v expand('%:t:r')`
snippet rfcn Creates a React function component with custom name
	
	const ${1:functionname} = () => {
		return (
			<div>
				$0
			</div>
		)
	}
	
	export default ${1:functionname}
snippet rfce Creates a React functional component with emotion
	import { css } from '@emotion/core'
	
	export const `!v expand('%:t:r')` = () => {
		return (
			<div css={css\`\`}>
				$0
			</div>
		)
	}
snippet rcjc Creates a React component class
	class `!v expand('%:t:r')` extends Component {
		render () {
			return (
				<div>
					$0
				</div>
			)
		}
	}
	
snippet rfcp Creates a React function component with PropTypes
	import { PropTypes } from 'react'
	
	const `!v expand('%:t:r')` = props => {
		return (
			<div>
				
			</div>
		)
	}
	
	$1.propTypes = {
		$0
	}
	
	export default $1
snippet scu Invoked before rendering when new props or state are being received.
	shouldComponentUpdate (nextProps, nextState) {
		$0
	}
	
snippet test Testing `test` block
	test('should $1', () => {
	  $0
	})
	
snippet ucb React useCallback() hook
	const ${1:memoizedCallback} = useCallback(
		() => {
			${2:doSomething}(${3:a}, ${4:b})
		},
		[${5:a}, ${6:b}],
	)$0
snippet uc React useContext() hook
	const $1 = useContext($2)$0
snippet ue React useEffect() hook
	useEffect(() => {
		$1
	}, [${3:dependencies}])$0
snippet uer React useEffect() hook with return statement
	useEffect(() => {
		$1
	
		return () => {
			$2
		}
	}, [${3:dependencies}])$0
snippet ume React useMemo() hook
	const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0
snippet ur React useContext() hook
	const ${1:elName}El = useRef(null)$0
snippet us use state hook
	const [${1:setterName}, set${1:setterName}] = useState(${2:defVal})$0
